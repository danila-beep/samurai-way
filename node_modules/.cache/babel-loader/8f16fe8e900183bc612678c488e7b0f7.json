{"ast":null,"code":"import { useMemo, useState } from 'react';\nexport function useMap() {\n  var _useState = useState(function () {\n    return new Map();\n  }),\n      map = _useState[0],\n      setMap = _useState[1];\n\n  return useMemo(function () {\n    return {\n      has: function has(key) {\n        return map.has(key);\n      },\n      get: function get(key) {\n        return map.get(key);\n      },\n      set: function set(key, value) {\n        setMap(function (prev) {\n          var copy = new Map(prev);\n          copy.set(key, value);\n          return copy;\n        });\n      },\n      clear: function clear() {\n        setMap(new Map());\n      }\n    };\n  }, [map]);\n}","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/rsuite/esm/utils/useMap.js"],"names":["useMemo","useState","useMap","_useState","Map","map","setMap","has","key","get","set","value","prev","copy","clear"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,OAAO,SAASC,MAAT,GAAkB;AACvB,MAAIC,SAAS,GAAGF,QAAQ,CAAC,YAAY;AACnC,WAAO,IAAIG,GAAJ,EAAP;AACD,GAFuB,CAAxB;AAAA,MAGIC,GAAG,GAAGF,SAAS,CAAC,CAAD,CAHnB;AAAA,MAIIG,MAAM,GAAGH,SAAS,CAAC,CAAD,CAJtB;;AAMA,SAAOH,OAAO,CAAC,YAAY;AACzB,WAAO;AACLO,MAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACrB,eAAOH,GAAG,CAACE,GAAJ,CAAQC,GAAR,CAAP;AACD,OAHI;AAILC,MAAAA,GAAG,EAAE,SAASA,GAAT,CAAaD,GAAb,EAAkB;AACrB,eAAOH,GAAG,CAACI,GAAJ,CAAQD,GAAR,CAAP;AACD,OANI;AAOLE,MAAAA,GAAG,EAAE,SAASA,GAAT,CAAaF,GAAb,EAAkBG,KAAlB,EAAyB;AAC5BL,QAAAA,MAAM,CAAC,UAAUM,IAAV,EAAgB;AACrB,cAAIC,IAAI,GAAG,IAAIT,GAAJ,CAAQQ,IAAR,CAAX;AACAC,UAAAA,IAAI,CAACH,GAAL,CAASF,GAAT,EAAcG,KAAd;AACA,iBAAOE,IAAP;AACD,SAJK,CAAN;AAKD,OAbI;AAcLC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBR,QAAAA,MAAM,CAAC,IAAIF,GAAJ,EAAD,CAAN;AACD;AAhBI,KAAP;AAkBD,GAnBa,EAmBX,CAACC,GAAD,CAnBW,CAAd;AAoBD","sourcesContent":["import { useMemo, useState } from 'react';\nexport function useMap() {\n  var _useState = useState(function () {\n    return new Map();\n  }),\n      map = _useState[0],\n      setMap = _useState[1];\n\n  return useMemo(function () {\n    return {\n      has: function has(key) {\n        return map.has(key);\n      },\n      get: function get(key) {\n        return map.get(key);\n      },\n      set: function set(key, value) {\n        setMap(function (prev) {\n          var copy = new Map(prev);\n          copy.set(key, value);\n          return copy;\n        });\n      },\n      clear: function clear() {\n        setMap(new Map());\n      }\n    };\n  }, [map]);\n}"]},"metadata":{},"sourceType":"module"}