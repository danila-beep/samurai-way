{"ast":null,"code":"import { useMemo } from 'react';\nimport { getPathTowardsItem } from '../utils/treeUtils';\n/**\n * Calculate columns to be displayed:\n *\n * - Every ancestor level of activeItem should be displayed\n * - The level that activeItem is at should be displayed\n * - If activeItem is a parent node, its child level should be displayed\n *\n * @param items\n * @param value\n * @param options\n * @returns\n */\n\nexport function getColumnsAndPaths(items, pathTarget, options) {\n  var getParent = options.getParent,\n      getChildren = options.getChildren;\n\n  if (!pathTarget) {\n    return {\n      columns: [items],\n      path: []\n    };\n  }\n\n  var columns = [];\n  var path = [pathTarget];\n  var children = getChildren(pathTarget);\n\n  if (children && children.length > 0) {\n    columns.unshift(children);\n  }\n\n  for (var parent = getParent(pathTarget); !!parent; parent = getParent(parent)) {\n    var _getChildren;\n\n    columns.unshift((_getChildren = getChildren(parent)) !== null && _getChildren !== void 0 ? _getChildren : []);\n    path.unshift(parent);\n  }\n\n  columns.unshift(items);\n  return {\n    columns: columns,\n    path: path\n  };\n}\n/**\n * Caculate following 3 things\n *\n * - The columns of items to be displayed\n * - The path towards the current focused item\n * - The path towards the current selected item (referred to by Cascader's value)\n *\n * @param params\n * @returns\n */\n\nexport function usePaths(_ref) {\n  var data = _ref.data,\n      activeItem = _ref.activeItem,\n      selectedItem = _ref.selectedItem,\n      getParent = _ref.getParent,\n      getChildren = _ref.getChildren;\n  var pathTowardsSelectedItem = useMemo(function () {\n    return getPathTowardsItem(selectedItem, getParent);\n  }, [getParent, selectedItem]);\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, activeItem, {\n      getParent: getParent,\n      getChildren: getChildren\n    });\n  }, [data, activeItem, getParent, getChildren]),\n      columnsToDisplay = _useMemo.columns,\n      pathTowardsActiveItem = _useMemo.path;\n\n  return {\n    columnsToDisplay: columnsToDisplay,\n    pathTowardsSelectedItem: pathTowardsSelectedItem,\n    pathTowardsActiveItem: pathTowardsActiveItem\n  };\n}","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/rsuite/esm/Cascader/utils.js"],"names":["useMemo","getPathTowardsItem","getColumnsAndPaths","items","pathTarget","options","getParent","getChildren","columns","path","children","length","unshift","parent","_getChildren","usePaths","_ref","data","activeItem","selectedItem","pathTowardsSelectedItem","_useMemo","columnsToDisplay","pathTowardsActiveItem"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,UAAnC,EAA+CC,OAA/C,EAAwD;AAC7D,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AAAA,MACIC,WAAW,GAAGF,OAAO,CAACE,WAD1B;;AAGA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO;AACLI,MAAAA,OAAO,EAAE,CAACL,KAAD,CADJ;AAELM,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID;;AAED,MAAID,OAAO,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,CAACL,UAAD,CAAX;AACA,MAAIM,QAAQ,GAAGH,WAAW,CAACH,UAAD,CAA1B;;AAEA,MAAIM,QAAQ,IAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAlC,EAAqC;AACnCH,IAAAA,OAAO,CAACI,OAAR,CAAgBF,QAAhB;AACD;;AAED,OAAK,IAAIG,MAAM,GAAGP,SAAS,CAACF,UAAD,CAA3B,EAAyC,CAAC,CAACS,MAA3C,EAAmDA,MAAM,GAAGP,SAAS,CAACO,MAAD,CAArE,EAA+E;AAC7E,QAAIC,YAAJ;;AAEAN,IAAAA,OAAO,CAACI,OAAR,CAAgB,CAACE,YAAY,GAAGP,WAAW,CAACM,MAAD,CAA3B,MAAyC,IAAzC,IAAiDC,YAAY,KAAK,KAAK,CAAvE,GAA2EA,YAA3E,GAA0F,EAA1G;AACAL,IAAAA,IAAI,CAACG,OAAL,CAAaC,MAAb;AACD;;AAEDL,EAAAA,OAAO,CAACI,OAAR,CAAgBT,KAAhB;AACA,SAAO;AACLK,IAAAA,OAAO,EAAEA,OADJ;AAELC,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACE,UADtB;AAAA,MAEIC,YAAY,GAAGH,IAAI,CAACG,YAFxB;AAAA,MAGIb,SAAS,GAAGU,IAAI,CAACV,SAHrB;AAAA,MAIIC,WAAW,GAAGS,IAAI,CAACT,WAJvB;AAKA,MAAIa,uBAAuB,GAAGpB,OAAO,CAAC,YAAY;AAChD,WAAOC,kBAAkB,CAACkB,YAAD,EAAeb,SAAf,CAAzB;AACD,GAFoC,EAElC,CAACA,SAAD,EAAYa,YAAZ,CAFkC,CAArC;;AAIA,MAAIE,QAAQ,GAAGrB,OAAO,CAAC,YAAY;AACjC,WAAOE,kBAAkB,CAACe,IAAD,EAAOC,UAAP,EAAmB;AAC1CZ,MAAAA,SAAS,EAAEA,SAD+B;AAE1CC,MAAAA,WAAW,EAAEA;AAF6B,KAAnB,CAAzB;AAID,GALqB,EAKnB,CAACU,IAAD,EAAOC,UAAP,EAAmBZ,SAAnB,EAA8BC,WAA9B,CALmB,CAAtB;AAAA,MAMIe,gBAAgB,GAAGD,QAAQ,CAACb,OANhC;AAAA,MAOIe,qBAAqB,GAAGF,QAAQ,CAACZ,IAPrC;;AASA,SAAO;AACLa,IAAAA,gBAAgB,EAAEA,gBADb;AAELF,IAAAA,uBAAuB,EAAEA,uBAFpB;AAGLG,IAAAA,qBAAqB,EAAEA;AAHlB,GAAP;AAKD","sourcesContent":["import { useMemo } from 'react';\nimport { getPathTowardsItem } from '../utils/treeUtils';\n\n/**\n * Calculate columns to be displayed:\n *\n * - Every ancestor level of activeItem should be displayed\n * - The level that activeItem is at should be displayed\n * - If activeItem is a parent node, its child level should be displayed\n *\n * @param items\n * @param value\n * @param options\n * @returns\n */\nexport function getColumnsAndPaths(items, pathTarget, options) {\n  var getParent = options.getParent,\n      getChildren = options.getChildren;\n\n  if (!pathTarget) {\n    return {\n      columns: [items],\n      path: []\n    };\n  }\n\n  var columns = [];\n  var path = [pathTarget];\n  var children = getChildren(pathTarget);\n\n  if (children && children.length > 0) {\n    columns.unshift(children);\n  }\n\n  for (var parent = getParent(pathTarget); !!parent; parent = getParent(parent)) {\n    var _getChildren;\n\n    columns.unshift((_getChildren = getChildren(parent)) !== null && _getChildren !== void 0 ? _getChildren : []);\n    path.unshift(parent);\n  }\n\n  columns.unshift(items);\n  return {\n    columns: columns,\n    path: path\n  };\n}\n\n/**\n * Caculate following 3 things\n *\n * - The columns of items to be displayed\n * - The path towards the current focused item\n * - The path towards the current selected item (referred to by Cascader's value)\n *\n * @param params\n * @returns\n */\nexport function usePaths(_ref) {\n  var data = _ref.data,\n      activeItem = _ref.activeItem,\n      selectedItem = _ref.selectedItem,\n      getParent = _ref.getParent,\n      getChildren = _ref.getChildren;\n  var pathTowardsSelectedItem = useMemo(function () {\n    return getPathTowardsItem(selectedItem, getParent);\n  }, [getParent, selectedItem]);\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, activeItem, {\n      getParent: getParent,\n      getChildren: getChildren\n    });\n  }, [data, activeItem, getParent, getChildren]),\n      columnsToDisplay = _useMemo.columns,\n      pathTowardsActiveItem = _useMemo.path;\n\n  return {\n    columnsToDisplay: columnsToDisplay,\n    pathTowardsSelectedItem: pathTowardsSelectedItem,\n    pathTowardsActiveItem: pathTowardsActiveItem\n  };\n}"]},"metadata":{},"sourceType":"module"}