{"ast":null,"code":"var _jsxFileName = \"/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginRedirect(props) {\n  _s();\n\n  const {\n    children,\n    ...rest\n  } = props;\n  const isAuthorized = useSelector(state => state.auth.isAuthorized);\n  let redirectStatus = 1;\n  useEffect(() => {\n    if (!isAuthorized) {\n      redirectStatus = 1;\n    } else {\n      redirectStatus = 2;\n    }\n  }, [isAuthorized]);\n\n  if (redirectStatus === 1) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  } else {\n    return children;\n  }\n}\n\n_s(LoginRedirect, \"+HbCWXDS00QC1Bs28UGK/V1+jz0=\", false, function () {\n  return [useSelector];\n});\n\n_c = LoginRedirect;\nexport default LoginRedirect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRedirect\");","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx"],"names":["React","useEffect","useSelector","Redirect","LoginRedirect","props","children","rest","isAuthorized","state","auth","redirectStatus"],"mappings":";;;AACA,OAAOA,KAAP,IAMEC,SANF,QAOO,OAPP;AAQA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA6D;AAAA;;AAC3D,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAwBF,KAA9B;AAEA,QAAMG,YAAY,GAAGN,WAAW,CAC7BO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,YADQ,CAAhC;AAGA,MAAIG,cAAqB,GAAG,CAA5B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,YAAL,EAAmB;AACjBG,MAAAA,cAAc,GAAG,CAAjB;AACD,KAFD,MAEO;AACLA,MAAAA,cAAc,GAAG,CAAjB;AACD;AACF,GANQ,EAMN,CAACH,YAAD,CANM,CAAT;;AAQA,MAAIG,cAAc,KAAK,CAAvB,EAA0B;AACxB,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,WAAOL,QAAP;AACD;AACF;;GArBQF,a;UAGcF,W;;;KAHdE,a;AAuBT,eAAeA,aAAf","sourcesContent":["import useSelection from \"antd/lib/table/hooks/useSelection\";\nimport React, {\n  JSXElementConstructor,\n  ReactChild,\n  ReactElement,\n  ReactFragment,\n  ReactPortal,\n  useEffect,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport { Redirect } from \"react-router-dom\";\n\ntype ReactNode = ReactElement<any, string | JSXElementConstructor<any>>;\n\ntype LoginRedirectProps = {\n  children: ReactNode;\n};\n\nfunction LoginRedirect(props: LoginRedirectProps): ReactNode {\n  const { children, ...rest } = props;\n\n  const isAuthorized = useSelector<RootState, boolean>(\n    (state) => state.auth.isAuthorized\n  );\n  let redirectStatus: 1 | 2 = 1;\n\n  useEffect(() => {\n    if (!isAuthorized) {\n      redirectStatus = 1;\n    } else {\n      redirectStatus = 2;\n    }\n  }, [isAuthorized]);\n\n  if (redirectStatus === 1) {\n    return <Redirect to={\"/login\"} />;\n  } else {\n    return children;\n  }\n}\n\nexport default LoginRedirect;\n"]},"metadata":{},"sourceType":"module"}