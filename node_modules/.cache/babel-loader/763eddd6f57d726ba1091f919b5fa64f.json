{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\n\nexport function createValidatorAsync(data, name) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n\n      return null;\n    };\n  }\n\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, { ...params,\n        name: Array.isArray(name) ? name.join('.') : name\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"mappings":"AACA,OAAOA,kBAAP,MAA+B,sBAA/B;AAEA;;;;;AAIA,OAAM,SAAUC,oBAAV,CAAwCC,IAAxC,EAAkDC,IAAlD,EAA0E;AAC9E,WAASC,KAAT,CAAeC,YAAf,EAAwC;AACtC,WAAQC,WAAD,IAAiE;AACtE,UAAIA,WAAW,KAAK,KAApB,EAA2B;AACzB,eAAO;AAAEC,kBAAQ,EAAE,IAAZ;AAAkBF;AAAlB,SAAP;AACD,OAFD,MAEO,IAAI,OAAOC,WAAP,KAAuB,QAAvB,KAAoCA,WAAW,CAACC,QAAZ,IAAwBD,WAAW,CAACE,KAAxE,CAAJ,EAAoF;AACzF,eAAOF,WAAP;AACD;;AACD,aAAO,IAAP;AACD,KAPD;AAQD;;AAED,SAAO,CAACG,KAAD,EAAWC,KAAX,KAAyC;AAC9C,UAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAG;AAChC,YAAM;AAAEC,eAAF;AAAWT,oBAAX;AAAyBU;AAAzB,UAAoCF,IAA1C;AACA,aAAOG,OAAO,CAACC,OAAR,CAAgBH,OAAO,CAACL,KAAD,EAAQP,IAAR,EAAcC,IAAd,CAAvB,EAA4Ce,IAA5C,CACLd,KAAK,CACHJ,kBAAkB,CAAIK,YAAJ,EAAkB,EAClC,GAAGU,MAD+B;AAElCZ,YAAI,EAAEgB,KAAK,CAACC,OAAN,CAAcjB,IAAd,IAAsBA,IAAI,CAACkB,IAAL,CAAU,GAAV,CAAtB,GAAuClB;AAFX,OAAlB,CADf,CADA,CAAP;AAQD,KAVgB,CAAjB;AAYA,WAAOa,OAAO,CAACM,GAAR,CAAYX,QAAZ,EAAsBO,IAAtB,CAA2BK,OAAO,IACvCA,OAAO,CAACC,IAAR,CAAcC,IAAD,IAAiCA,IAAI,KAAIA,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAElB,QAAV,CAAlD,CADK,CAAP;AAGD,GAhBD;AAiBD;AAED,eAAeN,oBAAf","names":["formatErrorMessage","createValidatorAsync","data","name","check","errorMessage","checkResult","hasError","array","value","rules","promises","map","rule","onValid","params","Promise","resolve","then","Array","isArray","join","all","results","find","item"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/utils/createValidatorAsync.ts"],"sourcesContent":["import { CheckResult, RuleType } from '../types';\nimport formatErrorMessage from './formatErrorMessage';\n\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync<V, D, E>(data?: D, name?: string | string[]) {\n  function check(errorMessage?: E | string) {\n    return (checkResult: CheckResult<E> | boolean): CheckResult<E> | null => {\n      if (checkResult === false) {\n        return { hasError: true, errorMessage };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n\n  return (value: V, rules: RuleType<V, D, E>[]) => {\n    const promises = rules.map(rule => {\n      const { onValid, errorMessage, params } = rule;\n      return Promise.resolve(onValid(value, data, name)).then(\n        check(\n          formatErrorMessage<E>(errorMessage, {\n            ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        )\n      );\n    });\n\n    return Promise.all(promises).then(results =>\n      results.find((item: CheckResult<E> | null) => item && item?.hasError)\n    );\n  };\n}\n\nexport default createValidatorAsync;\n"]},"metadata":{},"sourceType":"module"}