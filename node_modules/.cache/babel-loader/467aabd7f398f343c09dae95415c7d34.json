{"ast":null,"code":"var _jsxFileName = \"/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginRedirect(props) {\n  _s();\n\n  const {\n    children,\n    ...rest\n  } = props;\n  const isAuthorized = useSelector(state => state.auth.isAuthorized);\n\n  if (!isAuthorized) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n\n  return children;\n}\n\n_s(LoginRedirect, \"NreU8953txq+1yW6k0mkN00ktRQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = LoginRedirect;\nexport default LoginRedirect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRedirect\");","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx"],"names":["React","useSelector","Redirect","LoginRedirect","props","children","rest","isAuthorized","state","auth"],"mappings":";;;AACA,OAAOA,KAAP,MAAmG,OAAnG;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;;;AASA,SAASC,aAAT,CAA0BC,KAA1B,EAA+D;AAAA;;AAC3D,QAAM;AAACC,IAAAA,QAAD;AAAW,OAAGC;AAAd,MAAsBF,KAA5B;AAEA,QAAMG,YAAY,GAAGN,WAAW,CAAqBO,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,YAAzC,CAAhC;;AAEA,MAAI,CAACA,YAAL,EAAmB;AACf,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,SAAOF,QAAP;AACH;;GAVQF,a;UAGgBF,W;;;KAHhBE,a;AAYT,eAAeA,aAAf","sourcesContent":["import useSelection from \"antd/lib/table/hooks/useSelection\";\nimport React, { JSXElementConstructor, ReactChild, ReactElement, ReactFragment, ReactPortal } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport { Redirect } from \"react-router-dom\";\n\n\ntype ReactNode = ReactElement<any, string | JSXElementConstructor<any>>\n\ntype LoginRedirect = {\n    children: ReactNode\n}\n\nfunction LoginRedirect<T>(props: LoginRedirect & T): ReactNode {\n    const {children, ...rest} = props\n\n    const isAuthorized = useSelector<RootState, boolean>(state => state.auth.isAuthorized)\n\n    if (!isAuthorized) {\n        return <Redirect to={\"/login\"} />\n    }\n\n    return children\n}\n\nexport default LoginRedirect"]},"metadata":{},"sourceType":"module"}