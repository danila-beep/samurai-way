{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose'; // Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\n\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\n\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var _this$props2 = this.props,\n          itemCount = _this$props2.itemCount,\n          layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          initialScrollOffset = _this$props3.initialScrollOffset,\n          layout = _this$props3.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n          direction = _this$props4.direction,\n          layout = _this$props4.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          className = _this$props5.className,\n          direction = _this$props5.direction,\n          height = _this$props5.height,\n          innerRef = _this$props5.innerRef,\n          innerElementType = _this$props5.innerElementType,\n          innerTagName = _this$props5.innerTagName,\n          itemCount = _this$props5.itemCount,\n          itemData = _this$props5.itemData,\n          _this$props5$itemKey = _this$props5.itemKey,\n          itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n          layout = _this$props5.layout,\n          outerElementType = _this$props5.outerElementType,\n          outerTagName = _this$props5.outerTagName,\n          style = _this$props5.style,\n          useIsScrolling = _this$props5.useIsScrolling,\n          width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n          itemCount = _this$props6.itemCount,\n          overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n}); // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _excluded = [\"style\"],\n    _excluded2 = [\"style\"]; // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"mappings":"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","names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_inheritsLoose","props","_this","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","Grid","getDerivedStateFromProps","nextProps","validateSharedProps","_proto","scrollTo","scrollToItem","align","columnCount","rowCount","scrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","push","WebkitOverflowScrolling","willChange","pointerEvents","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","overscanRowCount","overscanRowsCount","PureComponent","defaultProps","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","forceUpdate","devWarningsDirection","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","List","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","areEqual","prevProps","prevStyle","prevRest","nextStyle","nextRest","shouldComponentUpdate","nextState"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/timer.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/domHelpers.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/createGridComponent.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/VariableSizeGrid.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/createListComponent.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/VariableSizeList.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/FixedSizeGrid.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/FixedSizeList.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/shallowDiffers.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/areEqual.js","/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-window/src/shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}