{"ast":null,"code":"var _jsxFileName = \"/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginRedirect(props) {\n  _s();\n\n  const {\n    children,\n    ...rest\n  } = props;\n  const isAuthorized = useSelector(state => state.auth.isAuthorized);\n\n  if (!isAuthorized) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/login`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return children;\n}\n\n_s(LoginRedirect, \"NreU8953txq+1yW6k0mkN00ktRQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = LoginRedirect;\nexport default LoginRedirect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRedirect\");","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/utils/hoc/LoginRedirect.tsx"],"names":["React","useSelector","Redirect","LoginRedirect","props","children","rest","isAuthorized","state","auth"],"mappings":";;;AACA,OAAOA,KAAP,MAOO,OAPP;AAQA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA6D;AAAA;;AAC3D,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAwBF,KAA9B;AAEA,QAAMG,YAAY,GAAGN,WAAW,CAC7BO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,YADQ,CAAhC;;AAIA,MAAI,CAACA,YAAL,EAAmB;AACjB,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAG;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,SAAOF,QAAP;AACD;;GAZQF,a;UAGcF,W;;;KAHdE,a;AAcT,eAAeA,aAAf","sourcesContent":["import useSelection from \"antd/lib/table/hooks/useSelection\";\nimport React, {\n  JSXElementConstructor,\n  ReactChild,\n  ReactElement,\n  ReactFragment,\n  ReactPortal,\n  useEffect,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport { Redirect } from \"react-router-dom\";\n\ntype ReactNode = ReactElement<any, string | JSXElementConstructor<any>>;\n\ntype LoginRedirectProps = {\n  children: ReactNode;\n};\n\nfunction LoginRedirect(props: LoginRedirectProps): ReactNode {\n  const { children, ...rest } = props;\n\n  const isAuthorized = useSelector<RootState, boolean>(\n    (state) => state.auth.isAuthorized\n  );\n\n  if (!isAuthorized) {\n    return <Redirect to={`/login`} />;\n  }\n\n  return children;\n}\n\nexport default LoginRedirect;\n"]},"metadata":{},"sourceType":"module"}