{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class BooleanType extends MixedType {\n  constructor(errorMessage) {\n    super('boolean');\n    super.pushRule({\n      onValid: v => typeof v === 'boolean',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n}\nexport default function getBooleanType(errorMessage) {\n  return new BooleanType(errorMessage);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAIA,OAAM,MAAOC,WAAP,SAAiED,SAAjE,CAKL;AACCE,cAAYC,YAAZ,EAAqC;AACnC,UAAM,SAAN;AACA,UAAMC,QAAN,CAAe;AACbC,aAAO,EAAEC,CAAC,IAAI,OAAOA,CAAP,KAAa,SADd;AAEbH,kBAAY,EAAEA,YAAY,IAAI,KAAKI,MAAL,CAAYC;AAF7B,KAAf;AAID;;AAPF;AAUD,eAAc,SAAUC,cAAV,CAAqDN,YAArD,EAAqE;AACjF,SAAO,IAAIF,WAAJ,CAA6BE,YAA7B,CAAP;AACD","names":["MixedType","BooleanType","constructor","errorMessage","pushRule","onValid","v","locale","type","getBooleanType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/BooleanType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { BooleanTypeLocale } from './locales';\n\nexport class BooleanType<DataType = any, E = ErrorMessageType> extends MixedType<\n  boolean,\n  DataType,\n  E,\n  BooleanTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('boolean');\n    super.pushRule({\n      onValid: v => typeof v === 'boolean',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n}\n\nexport default function getBooleanType<DataType = any, E = string>(errorMessage?: E) {\n  return new BooleanType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}