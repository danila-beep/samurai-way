{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nfunction useIntersectionObserver(elementRef, _ref) {\n  let {\n    threshold = 0,\n    root = null,\n    rootMargin = '0%',\n    freezeOnceVisible = false\n  } = _ref;\n  const [entry, setEntry] = useState();\n  const frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n\n  const updateEntry = _ref2 => {\n    let [entry] = _ref2;\n    setEntry(entry);\n  };\n\n  useEffect(() => {\n    const node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n    const hasIOSupport = !!window.IntersectionObserver;\n    if (!hasIOSupport || frozen || !node) return;\n    const observerParams = {\n      threshold,\n      root,\n      rootMargin\n    };\n    const observer = new IntersectionObserver(updateEntry, observerParams);\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef === null || elementRef === void 0 ? void 0 : elementRef.current, JSON.stringify(threshold), root, rootMargin, frozen]);\n  return entry;\n}\n\nexport default useIntersectionObserver;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/usehooks-ts/dist/esm/useIntersectionObserver/useIntersectionObserver.js"],"names":["useEffect","useState","useIntersectionObserver","elementRef","threshold","root","rootMargin","freezeOnceVisible","entry","setEntry","frozen","isIntersecting","updateEntry","node","current","hasIOSupport","window","IntersectionObserver","observerParams","observer","observe","disconnect","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AACA,SAASC,uBAAT,CAAiCC,UAAjC,QAA4H;AAAA,MAA/E;AAAEC,IAAAA,SAAS,GAAG,CAAd;AAAiBC,IAAAA,IAAI,GAAG,IAAxB;AAA8BC,IAAAA,UAAU,GAAG,IAA3C;AAAiDC,IAAAA,iBAAiB,GAAG;AAArE,GAA+E;AACxH,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAMS,MAAM,GAAG,CAACF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACG,cAArD,KAAwEJ,iBAAvF;;AACA,QAAMK,WAAW,GAAG,SAAa;AAAA,QAAZ,CAACJ,KAAD,CAAY;AAC7BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GAFD;;AAGAR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,IAAI,GAAGV,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACW,OAAhF;AACA,UAAMC,YAAY,GAAG,CAAC,CAACC,MAAM,CAACC,oBAA9B;AACA,QAAI,CAACF,YAAD,IAAiBL,MAAjB,IAA2B,CAACG,IAAhC,EACI;AACJ,UAAMK,cAAc,GAAG;AAAEd,MAAAA,SAAF;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA;AAAnB,KAAvB;AACA,UAAMa,QAAQ,GAAG,IAAIF,oBAAJ,CAAyBL,WAAzB,EAAsCM,cAAtC,CAAjB;AACAC,IAAAA,QAAQ,CAACC,OAAT,CAAiBP,IAAjB;AACA,WAAO,MAAMM,QAAQ,CAACE,UAAT,EAAb;AACH,GATQ,EASN,CAAClB,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACW,OAApE,EAA6EQ,IAAI,CAACC,SAAL,CAAenB,SAAf,CAA7E,EAAwGC,IAAxG,EAA8GC,UAA9G,EAA0HI,MAA1H,CATM,CAAT;AAUA,SAAOF,KAAP;AACH;;AACD,eAAeN,uBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nfunction useIntersectionObserver(elementRef, { threshold = 0, root = null, rootMargin = '0%', freezeOnceVisible = false, }) {\n    const [entry, setEntry] = useState();\n    const frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n    const updateEntry = ([entry]) => {\n        setEntry(entry);\n    };\n    useEffect(() => {\n        const node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        const hasIOSupport = !!window.IntersectionObserver;\n        if (!hasIOSupport || frozen || !node)\n            return;\n        const observerParams = { threshold, root, rootMargin };\n        const observer = new IntersectionObserver(updateEntry, observerParams);\n        observer.observe(node);\n        return () => observer.disconnect();\n    }, [elementRef === null || elementRef === void 0 ? void 0 : elementRef.current, JSON.stringify(threshold), root, rootMargin, frozen]);\n    return entry;\n}\nexport default useIntersectionObserver;\n"]},"metadata":{},"sourceType":"module"}