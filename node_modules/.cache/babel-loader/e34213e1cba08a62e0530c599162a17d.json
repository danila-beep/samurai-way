{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class StringType extends MixedType {\n  constructor(errorMessage) {\n    super('string');\n    super.pushRule({\n      onValid: v => typeof v === 'string',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  containsLetter() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.containsLetter;\n    super.pushRule({\n      onValid: v => /[a-zA-Z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsUppercaseLetter() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.containsUppercaseLetter;\n    super.pushRule({\n      onValid: v => /[A-Z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsLowercaseLetter() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.containsLowercaseLetter;\n    super.pushRule({\n      onValid: v => /[a-z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsLetterOnly() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.containsLetterOnly;\n    super.pushRule({\n      onValid: v => /^[a-zA-Z]+$/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsNumber() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.containsNumber;\n    super.pushRule({\n      onValid: v => /[0-9]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  isOneOf(values) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.isOneOf;\n    super.pushRule({\n      onValid: v => !!~values.indexOf(v),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n\n  isEmail() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isEmail;\n    // http://emailregex.com/\n    const regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  isURL() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isURL;\n    const regexp = new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$', 'i');\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  isHex() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isHex;\n    const regexp = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  pattern(regexp) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.pattern;\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n\n  rangeLength(minLength, maxLength) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n\n  minLength(minLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n    super.pushRule({\n      onValid: value => Array.from(value).length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n\n  maxLength(maxLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n    super.pushRule({\n      onValid: value => Array.from(value).length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getStringType(errorMessage) {\n  return new StringType(errorMessage);\n}","map":{"version":3,"mappings":"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","names":["MixedType","StringType","constructor","errorMessage","pushRule","onValid","v","locale","type","containsLetter","test","containsUppercaseLetter","containsLowercaseLetter","containsLetterOnly","containsNumber","isOneOf","values","indexOf","params","isEmail","regexp","isURL","RegExp","isHex","pattern","rangeLength","minLength","maxLength","value","length","Array","from","getStringType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/StringType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { StringTypeLocale } from './locales';\n\nexport class StringType<DataType = any, E = ErrorMessageType> extends MixedType<\n  string,\n  DataType,\n  E,\n  StringTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('string');\n    super.pushRule({\n      onValid: v => typeof v === 'string',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  containsLetter(errorMessage: E | string = this.locale.containsLetter) {\n    super.pushRule({\n      onValid: v => /[a-zA-Z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsUppercaseLetter(errorMessage: E | string = this.locale.containsUppercaseLetter) {\n    super.pushRule({\n      onValid: v => /[A-Z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsLowercaseLetter(errorMessage: E | string = this.locale.containsLowercaseLetter) {\n    super.pushRule({\n      onValid: v => /[a-z]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsLetterOnly(errorMessage: E | string = this.locale.containsLetterOnly) {\n    super.pushRule({\n      onValid: v => /^[a-zA-Z]+$/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  containsNumber(errorMessage: E | string = this.locale.containsNumber) {\n    super.pushRule({\n      onValid: v => /[0-9]/.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  isOneOf(values: string[], errorMessage: E | string = this.locale.isOneOf) {\n    super.pushRule({\n      onValid: v => !!~values.indexOf(v),\n      errorMessage,\n      params: { values }\n    });\n    return this;\n  }\n\n  isEmail(errorMessage: E | string = this.locale.isEmail) {\n    // http://emailregex.com/\n    const regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n\n  isURL(errorMessage: E | string = this.locale.isURL) {\n    const regexp = new RegExp(\n      '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$',\n      'i'\n    );\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n  isHex(errorMessage: E | string = this.locale.isHex) {\n    const regexp = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage\n    });\n    return this;\n  }\n  pattern(regexp: RegExp, errorMessage: E | string = this.locale.pattern) {\n    super.pushRule({\n      onValid: v => regexp.test(v),\n      errorMessage,\n      params: { regexp }\n    });\n    return this;\n  }\n\n  rangeLength(\n    minLength: number,\n    maxLength: number,\n    errorMessage: E | string = this.locale.rangeLength\n  ) {\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: { minLength, maxLength }\n    });\n    return this;\n  }\n\n  minLength(minLength: number, errorMessage: E | string = this.locale.minLength) {\n    super.pushRule({\n      onValid: value => Array.from(value).length >= minLength,\n      errorMessage,\n      params: { minLength }\n    });\n    return this;\n  }\n\n  maxLength(maxLength: number, errorMessage: E | string = this.locale.maxLength) {\n    super.pushRule({\n      onValid: value => Array.from(value).length <= maxLength,\n      errorMessage,\n      params: { maxLength }\n    });\n    return this;\n  }\n}\n\nexport default function getStringType<DataType = any, E = string>(errorMessage?: E) {\n  return new StringType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}