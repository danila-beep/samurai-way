{"ast":null,"code":"import getWindow from './getWindow';\nimport ownerDocument from './ownerDocument';\n\nfunction bodyIsOverflowing(node) {\n  var doc = ownerDocument(node);\n  var win = getWindow(doc);\n  var fullWidth = win.innerWidth;\n\n  if (doc.body) {\n    return doc.body.clientWidth < fullWidth;\n  }\n\n  return false;\n}\n/**\n * Check if the document is overflowing and account for the scrollbar width\n * @param container The container to check\n * @returns The document is overflowing\n */\n\n\nexport default function isOverflowing(container) {\n  var win = getWindow(container);\n  var isBody = container && container.tagName.toLowerCase() === 'body';\n  return win || isBody ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;\n}","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/dom-lib/esm/isOverflowing.js"],"names":["getWindow","ownerDocument","bodyIsOverflowing","node","doc","win","fullWidth","innerWidth","body","clientWidth","isOverflowing","container","isBody","tagName","toLowerCase","scrollHeight","clientHeight"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,GAAG,GAAGH,aAAa,CAACE,IAAD,CAAvB;AACA,MAAIE,GAAG,GAAGL,SAAS,CAACI,GAAD,CAAnB;AACA,MAAIE,SAAS,GAAGD,GAAG,CAACE,UAApB;;AAEA,MAAIH,GAAG,CAACI,IAAR,EAAc;AACZ,WAAOJ,GAAG,CAACI,IAAJ,CAASC,WAAT,GAAuBH,SAA9B;AACD;;AAED,SAAO,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASI,aAAT,CAAuBC,SAAvB,EAAkC;AAC/C,MAAIN,GAAG,GAAGL,SAAS,CAACW,SAAD,CAAnB;AACA,MAAIC,MAAM,GAAGD,SAAS,IAAIA,SAAS,CAACE,OAAV,CAAkBC,WAAlB,OAAoC,MAA9D;AACA,SAAOT,GAAG,IAAIO,MAAP,GAAgBV,iBAAiB,CAACS,SAAD,CAAjC,GAA+CA,SAAS,CAACI,YAAV,GAAyBJ,SAAS,CAACK,YAAzF;AACD","sourcesContent":["import getWindow from './getWindow';\nimport ownerDocument from './ownerDocument';\n\nfunction bodyIsOverflowing(node) {\n  var doc = ownerDocument(node);\n  var win = getWindow(doc);\n  var fullWidth = win.innerWidth;\n\n  if (doc.body) {\n    return doc.body.clientWidth < fullWidth;\n  }\n\n  return false;\n}\n/**\n * Check if the document is overflowing and account for the scrollbar width\n * @param container The container to check\n * @returns The document is overflowing\n */\n\n\nexport default function isOverflowing(container) {\n  var win = getWindow(container);\n  var isBody = container && container.tagName.toLowerCase() === 'body';\n  return win || isBody ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;\n}"]},"metadata":{},"sourceType":"module"}