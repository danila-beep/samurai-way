{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventCallback, useEventListener } from '..';\n\nfunction useSessionStorage(key, initialValue) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.sessionStorage.getItem(key);\n      return item ? parseJSON(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading sessionStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  const setValue = useEventCallback(value => {\n    if (typeof window == 'undefined') {\n      console.warn(`Tried setting sessionStorage key “${key}” even though environment is not a client`);\n    }\n\n    try {\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      window.sessionStorage.setItem(key, JSON.stringify(newValue));\n      setStoredValue(newValue);\n      window.dispatchEvent(new Event('session-storage'));\n    } catch (error) {\n      console.warn(`Error setting sessionStorage key “${key}”:`, error);\n    }\n  });\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(event => {\n    if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n      return;\n    }\n\n    setStoredValue(readValue());\n  }, [key, readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('session-storage', handleStorageChange);\n  return [storedValue, setValue];\n}\n\nexport default useSessionStorage;\n\nfunction parseJSON(value) {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n  } catch (_a) {\n    console.log('parsing error on', {\n      value\n    });\n    return undefined;\n  }\n}","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/usehooks-ts/dist/esm/useSessionStorage/useSessionStorage.js"],"names":["useCallback","useEffect","useState","useEventCallback","useEventListener","useSessionStorage","key","initialValue","readValue","window","item","sessionStorage","getItem","parseJSON","error","console","warn","storedValue","setStoredValue","setValue","value","newValue","Function","setItem","JSON","stringify","dispatchEvent","Event","handleStorageChange","event","undefined","parse","_a","log"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState, } from 'react';\nimport { useEventCallback, useEventListener } from '..';\nfunction useSessionStorage(key, initialValue) {\n    const readValue = useCallback(() => {\n        if (typeof window === 'undefined') {\n            return initialValue;\n        }\n        try {\n            const item = window.sessionStorage.getItem(key);\n            return item ? parseJSON(item) : initialValue;\n        }\n        catch (error) {\n            console.warn(`Error reading sessionStorage key “${key}”:`, error);\n            return initialValue;\n        }\n    }, [initialValue, key]);\n    const [storedValue, setStoredValue] = useState(readValue);\n    const setValue = useEventCallback(value => {\n        if (typeof window == 'undefined') {\n            console.warn(`Tried setting sessionStorage key “${key}” even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(storedValue) : value;\n            window.sessionStorage.setItem(key, JSON.stringify(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new Event('session-storage'));\n        }\n        catch (error) {\n            console.warn(`Error setting sessionStorage key “${key}”:`, error);\n        }\n    });\n    useEffect(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = useCallback((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    useEventListener('storage', handleStorageChange);\n    useEventListener('session-storage', handleStorageChange);\n    return [storedValue, setValue];\n}\nexport default useSessionStorage;\nfunction parseJSON(value) {\n    try {\n        return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n    }\n    catch (_a) {\n        console.log('parsing error on', { value });\n        return undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}