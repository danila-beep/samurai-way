{"ast":null,"code":"function _removeStyle(node, key) {\n  var _style, _style$removeProperty;\n\n  (_style = node.style) === null || _style === void 0 ? void 0 : (_style$removeProperty = _style.removeProperty) === null || _style$removeProperty === void 0 ? void 0 : _style$removeProperty.call(_style, key);\n}\n/**\n * Remove a style property from a DOM element\n * @param node The DOM element\n * @param keys key(s) typeof [string , array]\n */\n\n\nexport default function removeStyle(node, keys) {\n  if (typeof keys === 'string') {\n    _removeStyle(node, keys);\n  } else if (Array.isArray(keys)) {\n    keys.forEach(function (key) {\n      return _removeStyle(node, key);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/dom-lib/esm/removeStyle.js"],"names":["_removeStyle","node","key","_style","_style$removeProperty","style","removeProperty","call","removeStyle","keys","Array","isArray","forEach"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,MAAJ,EAAYC,qBAAZ;;AAEA,GAACD,MAAM,GAAGF,IAAI,CAACI,KAAf,MAA0B,IAA1B,IAAkCF,MAAM,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+D,CAACC,qBAAqB,GAAGD,MAAM,CAACG,cAAhC,MAAoD,IAApD,IAA4DF,qBAAqB,KAAK,KAAK,CAA3F,GAA+F,KAAK,CAApG,GAAwGA,qBAAqB,CAACG,IAAtB,CAA2BJ,MAA3B,EAAmCD,GAAnC,CAAvK;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASM,WAAT,CAAqBP,IAArB,EAA2BQ,IAA3B,EAAiC;AAC9C,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BT,IAAAA,YAAY,CAACC,IAAD,EAAOQ,IAAP,CAAZ;AACD,GAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAC9BA,IAAAA,IAAI,CAACG,OAAL,CAAa,UAAUV,GAAV,EAAe;AAC1B,aAAOF,YAAY,CAACC,IAAD,EAAOC,GAAP,CAAnB;AACD,KAFD;AAGD;AACF","sourcesContent":["function _removeStyle(node, key) {\n  var _style, _style$removeProperty;\n\n  (_style = node.style) === null || _style === void 0 ? void 0 : (_style$removeProperty = _style.removeProperty) === null || _style$removeProperty === void 0 ? void 0 : _style$removeProperty.call(_style, key);\n}\n/**\n * Remove a style property from a DOM element\n * @param node The DOM element\n * @param keys key(s) typeof [string , array]\n */\n\n\nexport default function removeStyle(node, keys) {\n  if (typeof keys === 'string') {\n    _removeStyle(node, keys);\n  } else if (Array.isArray(keys)) {\n    keys.forEach(function (key) {\n      return _removeStyle(node, key);\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}