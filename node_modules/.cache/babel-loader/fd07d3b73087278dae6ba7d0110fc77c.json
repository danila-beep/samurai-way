{"ast":null,"code":"// src/useSet.ts\nimport { useCallback, useMemo, useState } from \"react\";\n\nfunction useSet(iterable) {\n  const [set, setSet] = useState(() => new Set(iterable));\n  const add = useCallback(function () {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    setSet(prev => {\n      const copy = new Set(prev);\n\n      for (const value of values) {\n        copy.add(value);\n      }\n\n      return copy;\n    });\n  }, []);\n  const deleteValues = useCallback(function () {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n\n    setSet(prev => {\n      const copy = new Set(prev);\n\n      for (const value of values) {\n        copy.delete(value);\n      }\n\n      return copy;\n    });\n  }, []);\n  const toggle = useCallback(value => {\n    setSet(prev => {\n      const copy = new Set(prev);\n\n      if (!copy.has(value)) {\n        copy.add(value);\n      } else {\n        copy.delete(value);\n      }\n\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setSet( /* @__PURE__ */new Set());\n  }, []);\n  const sync = useCallback(values => {\n    setSet(new Set(values));\n  }, []);\n  return useMemo(() => {\n    return {\n      size: set.size,\n      has: value => set.has(value),\n      add,\n      delete: deleteValues,\n      clear,\n      sync,\n      toArray: () => Array.from(set),\n      toggle\n    };\n  }, [set, add, deleteValues, clear, sync, toggle]);\n}\n\nexport { useSet };","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/react-use-set/dist/index.mjs"],"names":["useCallback","useMemo","useState","useSet","iterable","set","setSet","Set","add","values","prev","copy","value","deleteValues","delete","toggle","has","clear","sync","size","toArray","Array","from"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,OAA/C;;AACA,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACxB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAC,MAAM,IAAIK,GAAJ,CAAQH,QAAR,CAAP,CAA9B;AACA,QAAMI,GAAG,GAAGR,WAAW,CAAC,YAAe;AAAA,sCAAXS,MAAW;AAAXA,MAAAA,MAAW;AAAA;;AACrCH,IAAAA,MAAM,CAAEI,IAAD,IAAU;AACf,YAAMC,IAAI,GAAG,IAAIJ,GAAJ,CAAQG,IAAR,CAAb;;AACA,WAAK,MAAME,KAAX,IAAoBH,MAApB,EAA4B;AAC1BE,QAAAA,IAAI,CAACH,GAAL,CAASI,KAAT;AACD;;AACD,aAAOD,IAAP;AACD,KANK,CAAN;AAOD,GARsB,EAQpB,EARoB,CAAvB;AASA,QAAME,YAAY,GAAGb,WAAW,CAAC,YAAe;AAAA,uCAAXS,MAAW;AAAXA,MAAAA,MAAW;AAAA;;AAC9CH,IAAAA,MAAM,CAAEI,IAAD,IAAU;AACf,YAAMC,IAAI,GAAG,IAAIJ,GAAJ,CAAQG,IAAR,CAAb;;AACA,WAAK,MAAME,KAAX,IAAoBH,MAApB,EAA4B;AAC1BE,QAAAA,IAAI,CAACG,MAAL,CAAYF,KAAZ;AACD;;AACD,aAAOD,IAAP;AACD,KANK,CAAN;AAOD,GAR+B,EAQ7B,EAR6B,CAAhC;AASA,QAAMI,MAAM,GAAGf,WAAW,CAAEY,KAAD,IAAW;AACpCN,IAAAA,MAAM,CAAEI,IAAD,IAAU;AACf,YAAMC,IAAI,GAAG,IAAIJ,GAAJ,CAAQG,IAAR,CAAb;;AACA,UAAI,CAACC,IAAI,CAACK,GAAL,CAASJ,KAAT,CAAL,EAAsB;AACpBD,QAAAA,IAAI,CAACH,GAAL,CAASI,KAAT;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,CAACG,MAAL,CAAYF,KAAZ;AACD;;AACD,aAAOD,IAAP;AACD,KARK,CAAN;AASD,GAVyB,EAUvB,EAVuB,CAA1B;AAWA,QAAMM,KAAK,GAAGjB,WAAW,CAAC,MAAM;AAC9BM,IAAAA,MAAM,EAAC,eAAgB,IAAIC,GAAJ,EAAjB,CAAN;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAGA,QAAMW,IAAI,GAAGlB,WAAW,CAAES,MAAD,IAAY;AACnCH,IAAAA,MAAM,CAAC,IAAIC,GAAJ,CAAQE,MAAR,CAAD,CAAN;AACD,GAFuB,EAErB,EAFqB,CAAxB;AAGA,SAAOR,OAAO,CAAC,MAAM;AACnB,WAAO;AACLkB,MAAAA,IAAI,EAAEd,GAAG,CAACc,IADL;AAELH,MAAAA,GAAG,EAAGJ,KAAD,IAAWP,GAAG,CAACW,GAAJ,CAAQJ,KAAR,CAFX;AAGLJ,MAAAA,GAHK;AAILM,MAAAA,MAAM,EAAED,YAJH;AAKLI,MAAAA,KALK;AAMLC,MAAAA,IANK;AAOLE,MAAAA,OAAO,EAAE,MAAMC,KAAK,CAACC,IAAN,CAAWjB,GAAX,CAPV;AAQLU,MAAAA;AARK,KAAP;AAUD,GAXa,EAWX,CAACV,GAAD,EAAMG,GAAN,EAAWK,YAAX,EAAyBI,KAAzB,EAAgCC,IAAhC,EAAsCH,MAAtC,CAXW,CAAd;AAYD;;AACD,SACEZ,MADF","sourcesContent":["// src/useSet.ts\nimport { useCallback, useMemo, useState } from \"react\";\nfunction useSet(iterable) {\n  const [set, setSet] = useState(() => new Set(iterable));\n  const add = useCallback((...values) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.add(value);\n      }\n      return copy;\n    });\n  }, []);\n  const deleteValues = useCallback((...values) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      for (const value of values) {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const toggle = useCallback((value) => {\n    setSet((prev) => {\n      const copy = new Set(prev);\n      if (!copy.has(value)) {\n        copy.add(value);\n      } else {\n        copy.delete(value);\n      }\n      return copy;\n    });\n  }, []);\n  const clear = useCallback(() => {\n    setSet(/* @__PURE__ */ new Set());\n  }, []);\n  const sync = useCallback((values) => {\n    setSet(new Set(values));\n  }, []);\n  return useMemo(() => {\n    return {\n      size: set.size,\n      has: (value) => set.has(value),\n      add,\n      delete: deleteValues,\n      clear,\n      sync,\n      toArray: () => Array.from(set),\n      toggle\n    };\n  }, [set, add, deleteValues, clear, sync, toggle]);\n}\nexport {\n  useSet\n};\n"]},"metadata":{},"sourceType":"module"}