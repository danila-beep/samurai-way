{"ast":null,"code":"import { v1 } from \"uuid\";\nimport { socialMediaAPI } from \"../../api/socialMediaAPI\";\nconst profilePageState = {\n  profile: {},\n  posts: []\n};\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : profilePageState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"profilePage/AddPost\":\n      return { ...state,\n        posts: [action.newPost, ...state.posts]\n      };\n\n    case \"profilePage/SetUserProfile\":\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case \"profilePage/SetUserStatus\":\n      {\n        return { ...state,\n          profile: { ...state.profile,\n            status: action.status\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //action creators\n\n\nexport const addPostAC = postText => {\n  return {\n    type: \"profilePage/AddPost\",\n    newPost: {\n      postId: v1(),\n      postText\n    }\n  };\n};\nexport const setUserProfileAC = profile => {\n  return {\n    type: \"profilePage/SetUserProfile\",\n    profile\n  };\n};\nexport const setUserStatusAC = status => {\n  return {\n    type: \"profilePage/SetUserStatus\",\n    status\n  };\n}; //thunk creators\n\nexport const setUserProfileTC = userId => async dispatch => {\n  socialMediaAPI.getUserProfile(userId).then(res => {\n    dispatch(setUserProfileAC(res.data));\n  });\n};\nexport const getUserStatusTC = userId => dispatch => {\n  socialMediaAPI.getUserStatus(userId).then(res => {\n    console.log(res.data);\n  }).catch(err => {\n    console.log(err);\n  });\n}; //types\n\nexport default profileReducer;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/store/reducers/profileReducer.ts"],"names":["v1","socialMediaAPI","profilePageState","profile","posts","profileReducer","state","action","type","newPost","status","addPostAC","postText","postId","setUserProfileAC","setUserStatusAC","setUserProfileTC","userId","dispatch","getUserProfile","then","res","data","getUserStatusTC","getUserStatus","console","log","catch","err"],"mappings":"AACA,SAASA,EAAT,QAAmB,MAAnB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAE,EADc;AAEvBC,EAAAA,KAAK,EAAE;AAFgB,CAAzB;;AAKA,MAAMC,cAAc,GAAG,YAGlB;AAAA,MAFHC,KAEG,uEAF2BJ,gBAE3B;AAAA,MADHK,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,qBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELF,QAAAA,KAAK,EAAE,CAACG,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACF,KAA1B;AAFF,OAAP;;AAIF,SAAK,4BAAL;AAAmC;AACjC,eAAO,EACL,GAAGE,KADE;AAELH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFX,SAAP;AAID;;AACD,SAAK,2BAAL;AAAkC;AAChC,eAAO,EACL,GAAGG,KADE;AAELH,UAAAA,OAAO,EAAE,EACP,GAAGG,KAAK,CAACH,OADF;AAEPO,YAAAA,MAAM,EAAEH,MAAM,CAACG;AAFR;AAFJ,SAAP;AAOD;;AACD;AACE,aAAOJ,KAAP;AAtBJ;AAwBD,CA5BD,C,CA8BA;;;AACA,OAAO,MAAMK,SAAS,GAAIC,QAAD,IAAsB;AAC7C,SAAO;AACLJ,IAAAA,IAAI,EAAE,qBADD;AAELC,IAAAA,OAAO,EAAE;AAAEI,MAAAA,MAAM,EAAEb,EAAE,EAAZ;AAAgBY,MAAAA;AAAhB;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAME,gBAAgB,GAAIX,OAAD,IAA8B;AAC5D,SAAO;AAAEK,IAAAA,IAAI,EAAE,4BAAR;AAAsCL,IAAAA;AAAtC,GAAP;AACD,CAFM;AAGP,OAAO,MAAMY,eAAe,GAAIL,MAAD,IAAoB;AACjD,SAAO;AAAEF,IAAAA,IAAI,EAAE,2BAAR;AAAqCE,IAAAA;AAArC,GAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMM,gBAAgB,GAC1BC,MAAD,IAAoB,MAAOC,QAAP,IAA8B;AAChDjB,EAAAA,cAAc,CAACkB,cAAf,CAA8BF,MAA9B,EAAsCG,IAAtC,CAA4CC,GAAD,IAAS;AAClDH,IAAAA,QAAQ,CAACJ,gBAAgB,CAACO,GAAG,CAACC,IAAL,CAAjB,CAAR;AACD,GAFD;AAGD,CALI;AAMP,OAAO,MAAMC,eAAe,GAAIN,MAAD,IAAqBC,QAAD,IAAwB;AACzEjB,EAAAA,cAAc,CACXuB,aADH,CACiBP,MADjB,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbI,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,IAAhB;AACD,GAJH,EAKGK,KALH,CAKUC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,GAPH;AAQD,CATM,C,CAWP;;AAuCA,eAAevB,cAAf","sourcesContent":["import { Dispatch } from \"redux\";\nimport { v1 } from \"uuid\";\nimport { socialMediaAPI } from \"../../api/socialMediaAPI\";\n\nconst profilePageState = {\n  profile: {},\n  posts: [],\n};\n\nconst profileReducer = (\n  state: ProfilePageStateType = profilePageState,\n  action: ActionsType\n) => {\n  switch (action.type) {\n    case \"profilePage/AddPost\":\n      return {\n        ...state,\n        posts: [action.newPost, ...state.posts],\n      };\n    case \"profilePage/SetUserProfile\": {\n      return {\n        ...state,\n        profile: action.profile,\n      };\n    }\n    case \"profilePage/SetUserStatus\": {\n      return {\n        ...state,\n        profile: {\n          ...state.profile,\n          status: action.status,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n//action creators\nexport const addPostAC = (postText: string) => {\n  return {\n    type: \"profilePage/AddPost\",\n    newPost: { postId: v1(), postText },\n  } as const;\n};\nexport const setUserProfileAC = (profile: ProfileInfoType) => {\n  return { type: \"profilePage/SetUserProfile\", profile } as const;\n};\nexport const setUserStatusAC = (status: string) => {\n  return { type: \"profilePage/SetUserStatus\", status } as const;\n};\n\n//thunk creators\nexport const setUserProfileTC =\n  (userId: string) => async (dispatch: Dispatch) => {\n    socialMediaAPI.getUserProfile(userId).then((res) => {\n      dispatch(setUserProfileAC(res.data));\n    });\n  };\nexport const getUserStatusTC = (userId: string) => (dispatch: Dispatch) => {\n  socialMediaAPI\n    .getUserStatus(userId)\n    .then((res) => {\n      console.log(res.data);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\n//types\ntype ProfilePageStateType = {\n  profile: ProfileInfoType;\n  posts: PostType[];\n};\n\ntype ProfileInfoType = {\n  userId?: number;\n  lookingForAJob?: boolean;\n  lookingForAJobDescription?: string;\n  fullName?: string;\n  contacts?: {\n    github: string;\n    vk: string;\n    facebook: string;\n    instagram: string;\n    twitter: string;\n    website: string;\n    youtube: string;\n    mainLink: string;\n  };\n  photos?: {\n    small: string;\n    large: string;\n  };\n  status: string;\n};\n\ntype PostType = {\n  postId: string;\n  postText: string;\n};\n\ntype AddPostActionType = ReturnType<typeof addPostAC>;\ntype SetUserProfileType = ReturnType<typeof setUserProfileAC>;\ntype SetUserStatusType = ReturnType<typeof setUserStatusAC>;\n\ntype ActionsType = AddPostActionType | SetUserProfileType | SetUserStatusType;\n\nexport default profileReducer;\n"]},"metadata":{},"sourceType":"module"}