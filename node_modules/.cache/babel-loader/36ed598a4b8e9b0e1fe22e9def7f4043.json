{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class DateType extends MixedType {\n  constructor(errorMessage) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getDateType(errorMessage) {\n  return new DateType(errorMessage);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AAIA,OAAM,MAAOC,QAAP,SAA8DD,SAA9D,CAKL;AACCE,cAAYC,YAAZ,EAAqC;AACnC,UAAM,MAAN;AACA,UAAMC,QAAN,CAAe;AACbC,aAAO,EAAEC,KAAK,IAAI,CAAC,cAAcC,IAAd,CAAmB,IAAIC,IAAJ,CAASF,KAAT,EAAgBG,QAAhB,EAAnB,CADN;AAEbN,kBAAY,EAAEA,YAAY,IAAI,KAAKO,MAAL,CAAYC;AAF7B,KAAf;AAID;;AAEDC,OAAK,CAACC,GAAD,EAAqBC,GAArB,EAAqF;AAAA,QAA5CX,YAA4C,uEAAjB,KAAKO,MAAL,CAAYE,KAAK;AACxF,UAAMR,QAAN,CAAe;AACbC,aAAO,EAAEC,KAAK,IAAI,IAAIE,IAAJ,CAASF,KAAT,KAAmB,IAAIE,IAAJ,CAASK,GAAT,CAAnB,IAAoC,IAAIL,IAAJ,CAASF,KAAT,KAAmB,IAAIE,IAAJ,CAASM,GAAT,CAD5D;AAEbX,kBAFa;AAGbY,YAAM,EAAE;AAAEF,WAAF;AAAOC;AAAP;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDD,KAAG,CAACA,GAAD,EAA+D;AAAA,QAA1CV,YAA0C,uEAAf,KAAKO,MAAL,CAAYG,GAAG;AAChE,UAAMT,QAAN,CAAe;AACbC,aAAO,EAAEC,KAAK,IAAI,IAAIE,IAAJ,CAASF,KAAT,KAAmB,IAAIE,IAAJ,CAASK,GAAT,CADxB;AAEbV,kBAFa;AAGbY,YAAM,EAAE;AAAEF;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDC,KAAG,CAACA,GAAD,EAA+D;AAAA,QAA1CX,YAA0C,uEAAf,KAAKO,MAAL,CAAYI,GAAG;AAChE,UAAMV,QAAN,CAAe;AACbC,aAAO,EAAEC,KAAK,IAAI,IAAIE,IAAJ,CAASF,KAAT,KAAmB,IAAIE,IAAJ,CAASM,GAAT,CADxB;AAEbX,kBAFa;AAGbY,YAAM,EAAE;AAAED;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAlCF;AAqCD,eAAc,SAAUE,WAAV,CAAkDb,YAAlD,EAAkE;AAC9E,SAAO,IAAIF,QAAJ,CAA0BE,YAA1B,CAAP;AACD","names":["MixedType","DateType","constructor","errorMessage","pushRule","onValid","value","test","Date","toString","locale","type","range","min","max","params","getDateType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/DateType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { DateTypeLocale } from './locales';\n\nexport class DateType<DataType = any, E = ErrorMessageType> extends MixedType<\n  string | Date,\n  DataType,\n  E,\n  DateTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('date');\n    super.pushRule({\n      onValid: value => !/Invalid|NaN/.test(new Date(value).toString()),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  range(min: string | Date, max: string | Date, errorMessage: E | string = this.locale.range) {\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min) && new Date(value) <= new Date(max),\n      errorMessage,\n      params: { min, max }\n    });\n    return this;\n  }\n\n  min(min: string | Date, errorMessage: E | string = this.locale.min) {\n    super.pushRule({\n      onValid: value => new Date(value) >= new Date(min),\n      errorMessage,\n      params: { min }\n    });\n    return this;\n  }\n\n  max(max: string | Date, errorMessage: E | string = this.locale.max) {\n    super.pushRule({\n      onValid: value => new Date(value) <= new Date(max),\n      errorMessage,\n      params: { max }\n    });\n    return this;\n  }\n}\n\nexport default function getDateType<DataType = any, E = string>(errorMessage?: E) {\n  return new DateType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}