{"ast":null,"code":"import { useLocalStorage, useMediaQuery, useUpdateEffect } from '..';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\n\nfunction useDarkMode(defaultValue) {\n  var _a;\n\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n  const [isDarkMode, setDarkMode] = useLocalStorage('usehooks-ts-dark-mode', (_a = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _a !== void 0 ? _a : false);\n  useUpdateEffect(() => {\n    setDarkMode(isDarkOS);\n  }, [isDarkOS]);\n  return {\n    isDarkMode,\n    toggle: () => setDarkMode(prev => !prev),\n    enable: () => setDarkMode(true),\n    disable: () => setDarkMode(false)\n  };\n}\n\nexport default useDarkMode;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/usehooks-ts/dist/esm/useDarkMode/useDarkMode.js"],"names":["useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useDarkMode","defaultValue","_a","isDarkOS","isDarkMode","setDarkMode","toggle","prev","enable","disable"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,EAAyCC,eAAzC,QAAgE,IAAhE;AACA,MAAMC,kBAAkB,GAAG,8BAA3B;;AACA,SAASC,WAAT,CAAqBC,YAArB,EAAmC;AAC/B,MAAIC,EAAJ;;AACA,QAAMC,QAAQ,GAAGN,aAAa,CAACE,kBAAD,CAA9B;AACA,QAAM,CAACK,UAAD,EAAaC,WAAb,IAA4BT,eAAe,CAAC,uBAAD,EAA0B,CAACM,EAAE,GAAGD,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmDA,YAAnD,GAAkEE,QAAxE,MAAsF,IAAtF,IAA8FD,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmH,KAA7I,CAAjD;AACAJ,EAAAA,eAAe,CAAC,MAAM;AAClBO,IAAAA,WAAW,CAACF,QAAD,CAAX;AACH,GAFc,EAEZ,CAACA,QAAD,CAFY,CAAf;AAGA,SAAO;AACHC,IAAAA,UADG;AAEHE,IAAAA,MAAM,EAAE,MAAMD,WAAW,CAACE,IAAI,IAAI,CAACA,IAAV,CAFtB;AAGHC,IAAAA,MAAM,EAAE,MAAMH,WAAW,CAAC,IAAD,CAHtB;AAIHI,IAAAA,OAAO,EAAE,MAAMJ,WAAW,CAAC,KAAD;AAJvB,GAAP;AAMH;;AACD,eAAeL,WAAf","sourcesContent":["import { useLocalStorage, useMediaQuery, useUpdateEffect } from '..';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useDarkMode(defaultValue) {\n    var _a;\n    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n    const [isDarkMode, setDarkMode] = useLocalStorage('usehooks-ts-dark-mode', (_a = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _a !== void 0 ? _a : false);\n    useUpdateEffect(() => {\n        setDarkMode(isDarkOS);\n    }, [isDarkOS]);\n    return {\n        isDarkMode,\n        toggle: () => setDarkMode(prev => !prev),\n        enable: () => setDarkMode(true),\n        disable: () => setDarkMode(false),\n    };\n}\nexport default useDarkMode;\n"]},"metadata":{},"sourceType":"module"}