{"ast":null,"code":"import { MixedType } from './MixedType';\n\nfunction toNumber(value) {\n  return +value;\n}\n\nexport class NumberType extends MixedType {\n  constructor(errorMessage) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  isInteger() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isInteger;\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n    return this;\n  }\n\n  pattern(regexp) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.pattern;\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: {\n        regexp\n      }\n    });\n    return this;\n  }\n\n  isOneOf(values) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.isOneOf;\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: {\n        values\n      }\n    });\n    return this;\n  }\n\n  range(min, max) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.range;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: {\n        min,\n        max\n      }\n    });\n    return this;\n  }\n\n  min(min) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.min;\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: {\n        min\n      }\n    });\n    return this;\n  }\n\n  max(max) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.max;\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: {\n        max\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getNumberType(errorMessage) {\n  return new NumberType(errorMessage);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;;AAIA,SAASC,QAAT,CAAkBC,KAAlB,EAAwC;AACtC,SAAO,CAACA,KAAR;AACD;;AAED,OAAM,MAAOC,UAAP,SAAgEH,SAAhE,CAKL;AACCI,cAAYC,YAAZ,EAAqC;AACnC,UAAM,QAAN;AACA,UAAMC,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAI,2CAA2CM,IAA3C,CAAgDN,KAAK,GAAG,EAAxD,CADL;AAEbG,kBAAY,EAAEA,YAAY,IAAI,KAAKI,MAAL,CAAYC;AAF7B,KAAf;AAID;;AAEDC,WAAS,GAAiD;AAAA,QAAhDN,YAAgD,uEAArB,KAAKI,MAAL,CAAYE,SAAS;AACxD,UAAML,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAI,UAAUM,IAAV,CAAeN,KAAK,GAAG,EAAvB,CADL;AAEbG;AAFa,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDO,SAAO,CAACC,MAAD,EAA+D;AAAA,QAA9CR,YAA8C,uEAAnB,KAAKI,MAAL,CAAYG,OAAO;AACpE,UAAMN,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAIW,MAAM,CAACL,IAAP,CAAYN,KAAK,GAAG,EAApB,CADL;AAEbG,kBAFa;AAGbS,YAAM,EAAE;AAAED;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDE,SAAO,CAACC,MAAD,EAAiE;AAAA,QAA9CX,YAA8C,uEAAnB,KAAKI,MAAL,CAAYM,OAAO;AACtE,UAAMT,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAIc,MAAM,CAACC,QAAP,CAAgBhB,QAAQ,CAACC,KAAD,CAAxB,CADL;AAEbG,kBAFa;AAGbS,YAAM,EAAE;AAAEE;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDE,OAAK,CAACC,GAAD,EAAcC,GAAd,EAAuE;AAAA,QAA5Cf,YAA4C,uEAAjB,KAAKI,MAAL,CAAYS,KAAK;AAC1E,UAAMZ,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAD,CAAR,IAAmBiB,GAAnB,IAA0BlB,QAAQ,CAACC,KAAD,CAAR,IAAmBkB,GADlD;AAEbf,kBAFa;AAGbS,YAAM,EAAE;AAAEK,WAAF;AAAOC;AAAP;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDD,KAAG,CAACA,GAAD,EAAwD;AAAA,QAA1Cd,YAA0C,uEAAf,KAAKI,MAAL,CAAYU,GAAG;AACzD,UAAMb,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAD,CAAR,IAAmBiB,GADxB;AAEbd,kBAFa;AAGbS,YAAM,EAAE;AAAEK;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AAEDC,KAAG,CAACA,GAAD,EAAwD;AAAA,QAA1Cf,YAA0C,uEAAf,KAAKI,MAAL,CAAYW,GAAG;AACzD,UAAMd,QAAN,CAAe;AACbC,aAAO,EAAEL,KAAK,IAAID,QAAQ,CAACC,KAAD,CAAR,IAAmBkB,GADxB;AAEbf,kBAFa;AAGbS,YAAM,EAAE;AAAEM;AAAF;AAHK,KAAf;AAKA,WAAO,IAAP;AACD;;AA7DF;AAgED,eAAc,SAAUC,aAAV,CAAoDhB,YAApD,EAAoE;AAChF,SAAO,IAAIF,UAAJ,CAA4BE,YAA5B,CAAP;AACD","names":["MixedType","toNumber","value","NumberType","constructor","errorMessage","pushRule","onValid","test","locale","type","isInteger","pattern","regexp","params","isOneOf","values","includes","range","min","max","getNumberType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/NumberType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { ErrorMessageType } from './types';\nimport { NumberTypeLocale } from './locales';\n\nfunction toNumber(value: string | number) {\n  return +value;\n}\n\nexport class NumberType<DataType = any, E = ErrorMessageType> extends MixedType<\n  number | string,\n  DataType,\n  E,\n  NumberTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('number');\n    super.pushRule({\n      onValid: value => /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/.test(value + ''),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  isInteger(errorMessage: E | string = this.locale.isInteger) {\n    super.pushRule({\n      onValid: value => /^-?\\d+$/.test(value + ''),\n      errorMessage\n    });\n\n    return this;\n  }\n\n  pattern(regexp: RegExp, errorMessage: E | string = this.locale.pattern) {\n    super.pushRule({\n      onValid: value => regexp.test(value + ''),\n      errorMessage,\n      params: { regexp }\n    });\n    return this;\n  }\n\n  isOneOf(values: number[], errorMessage: E | string = this.locale.isOneOf) {\n    super.pushRule({\n      onValid: value => values.includes(toNumber(value)),\n      errorMessage,\n      params: { values }\n    });\n    return this;\n  }\n\n  range(min: number, max: number, errorMessage: E | string = this.locale.range) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min && toNumber(value) <= max,\n      errorMessage,\n      params: { min, max }\n    });\n    return this;\n  }\n\n  min(min: number, errorMessage: E | string = this.locale.min) {\n    super.pushRule({\n      onValid: value => toNumber(value) >= min,\n      errorMessage,\n      params: { min }\n    });\n    return this;\n  }\n\n  max(max: number, errorMessage: E | string = this.locale.max) {\n    super.pushRule({\n      onValid: value => toNumber(value) <= max,\n      errorMessage,\n      params: { max }\n    });\n    return this;\n  }\n}\n\nexport default function getNumberType<DataType = any, E = string>(errorMessage?: E) {\n  return new NumberType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}