{"ast":null,"code":"import { useState, useCallback, useRef } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport useMount from './useMount';\nimport isEmpty from 'lodash/isEmpty';\nimport defer from './defer';\n/**\n * The row information of the table, get the DOM of all rows, and summarize the row height.\n * @param props\n * @returns\n */\n\nvar useTableRows = function useTableRows(props) {\n  var prefix = props.prefix,\n      wordWrap = props.wordWrap,\n      data = props.data,\n      expandedRowKeys = props.expandedRowKeys;\n\n  var _useState = useState([]),\n      tableRowsMaxHeight = _useState[0],\n      setTableRowsMaxHeight = _useState[1];\n\n  var tableRows = useRef({});\n\n  var bindTableRowsRef = function bindTableRowsRef(index, rowData) {\n    return function (ref) {\n      if (ref) {\n        tableRows.current[index] = [ref, rowData];\n      }\n    };\n  };\n\n  var calculateRowMaxHeight = useCallback(function () {\n    if (wordWrap) {\n      var nextTableRowsMaxHeight = [];\n      var curTableRows = Object.values(tableRows.current);\n\n      for (var i = 0; i < curTableRows.length; i++) {\n        var _curTableRows$i = curTableRows[i],\n            row = _curTableRows$i[0];\n\n        if (row) {\n          var cells = row.querySelectorAll(\".\" + prefix('cell-wrap')) || [];\n          var cellArray = Array.from(cells);\n          var maxHeight = 0;\n\n          for (var j = 0; j < cellArray.length; j++) {\n            var cell = cellArray[j];\n            var h = getHeight(cell);\n            maxHeight = Math.max(maxHeight, h);\n          }\n\n          nextTableRowsMaxHeight.push(maxHeight);\n        }\n      } // Can't perform a React state update on an unmounted component\n\n\n      if (!isEmpty(tableRows.current)) {\n        setTableRowsMaxHeight(nextTableRowsMaxHeight);\n      }\n    }\n  }, [prefix, wordWrap]);\n  useMount(function () {\n    defer(calculateRowMaxHeight);\n  });\n  useUpdateLayoutEffect(function () {\n    /**\n     * After the data is updated, the height of the cell DOM needs to be re-acquired,\n     * and what is often obtained is not the latest DOM that has been rendered.\n     * So use `defer` to delay obtaining the height of the cell DOM.\n     * TODO: To be improved\n     */\n    defer(calculateRowMaxHeight);\n  }, [data, expandedRowKeys]);\n  return {\n    bindTableRowsRef: bindTableRowsRef,\n    tableRowsMaxHeight: tableRowsMaxHeight,\n    tableRows: tableRows\n  };\n};\n\nexport default useTableRows;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/rsuite-table/es/utils/useTableRows.js"],"names":["useState","useCallback","useRef","getHeight","useUpdateLayoutEffect","useMount","isEmpty","defer","useTableRows","props","prefix","wordWrap","data","expandedRowKeys","_useState","tableRowsMaxHeight","setTableRowsMaxHeight","tableRows","bindTableRowsRef","index","rowData","ref","current","calculateRowMaxHeight","nextTableRowsMaxHeight","curTableRows","Object","values","i","length","_curTableRows$i","row","cells","querySelectorAll","cellArray","Array","from","maxHeight","j","cell","h","Math","max","push"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9C,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,IAAI,GAAGH,KAAK,CAACG,IAFjB;AAAA,MAGIC,eAAe,GAAGJ,KAAK,CAACI,eAH5B;;AAKA,MAAIC,SAAS,GAAGd,QAAQ,CAAC,EAAD,CAAxB;AAAA,MACIe,kBAAkB,GAAGD,SAAS,CAAC,CAAD,CADlC;AAAA,MAEIE,qBAAqB,GAAGF,SAAS,CAAC,CAAD,CAFrC;;AAIA,MAAIG,SAAS,GAAGf,MAAM,CAAC,EAAD,CAAtB;;AAEA,MAAIgB,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;AAC/D,WAAO,UAAUC,GAAV,EAAe;AACpB,UAAIA,GAAJ,EAAS;AACPJ,QAAAA,SAAS,CAACK,OAAV,CAAkBH,KAAlB,IAA2B,CAACE,GAAD,EAAMD,OAAN,CAA3B;AACD;AACF,KAJD;AAKD,GAND;;AAQA,MAAIG,qBAAqB,GAAGtB,WAAW,CAAC,YAAY;AAClD,QAAIU,QAAJ,EAAc;AACZ,UAAIa,sBAAsB,GAAG,EAA7B;AACA,UAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcV,SAAS,CAACK,OAAxB,CAAnB;;AAEA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAAY,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIE,eAAe,GAAGL,YAAY,CAACG,CAAD,CAAlC;AAAA,YACIG,GAAG,GAAGD,eAAe,CAAC,CAAD,CADzB;;AAGA,YAAIC,GAAJ,EAAS;AACP,cAAIC,KAAK,GAAGD,GAAG,CAACE,gBAAJ,CAAqB,MAAMvB,MAAM,CAAC,WAAD,CAAjC,KAAmD,EAA/D;AACA,cAAIwB,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWJ,KAAX,CAAhB;AACA,cAAIK,SAAS,GAAG,CAAhB;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACL,MAA9B,EAAsCS,CAAC,EAAvC,EAA2C;AACzC,gBAAIC,IAAI,GAAGL,SAAS,CAACI,CAAD,CAApB;AACA,gBAAIE,CAAC,GAAGrC,SAAS,CAACoC,IAAD,CAAjB;AACAF,YAAAA,SAAS,GAAGI,IAAI,CAACC,GAAL,CAASL,SAAT,EAAoBG,CAApB,CAAZ;AACD;;AAEDhB,UAAAA,sBAAsB,CAACmB,IAAvB,CAA4BN,SAA5B;AACD;AACF,OArBW,CAqBV;;;AAGF,UAAI,CAAC/B,OAAO,CAACW,SAAS,CAACK,OAAX,CAAZ,EAAiC;AAC/BN,QAAAA,qBAAqB,CAACQ,sBAAD,CAArB;AACD;AACF;AACF,GA7BsC,EA6BpC,CAACd,MAAD,EAASC,QAAT,CA7BoC,CAAvC;AA8BAN,EAAAA,QAAQ,CAAC,YAAY;AACnBE,IAAAA,KAAK,CAACgB,qBAAD,CAAL;AACD,GAFO,CAAR;AAGAnB,EAAAA,qBAAqB,CAAC,YAAY;AAChC;AACJ;AACA;AACA;AACA;AACA;AACIG,IAAAA,KAAK,CAACgB,qBAAD,CAAL;AACD,GARoB,EAQlB,CAACX,IAAD,EAAOC,eAAP,CARkB,CAArB;AASA,SAAO;AACLK,IAAAA,gBAAgB,EAAEA,gBADb;AAELH,IAAAA,kBAAkB,EAAEA,kBAFf;AAGLE,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CAnED;;AAqEA,eAAeT,YAAf","sourcesContent":["import { useState, useCallback, useRef } from 'react';\nimport getHeight from 'dom-lib/getHeight';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport useMount from './useMount';\nimport isEmpty from 'lodash/isEmpty';\nimport defer from './defer';\n\n/**\n * The row information of the table, get the DOM of all rows, and summarize the row height.\n * @param props\n * @returns\n */\nvar useTableRows = function useTableRows(props) {\n  var prefix = props.prefix,\n      wordWrap = props.wordWrap,\n      data = props.data,\n      expandedRowKeys = props.expandedRowKeys;\n\n  var _useState = useState([]),\n      tableRowsMaxHeight = _useState[0],\n      setTableRowsMaxHeight = _useState[1];\n\n  var tableRows = useRef({});\n\n  var bindTableRowsRef = function bindTableRowsRef(index, rowData) {\n    return function (ref) {\n      if (ref) {\n        tableRows.current[index] = [ref, rowData];\n      }\n    };\n  };\n\n  var calculateRowMaxHeight = useCallback(function () {\n    if (wordWrap) {\n      var nextTableRowsMaxHeight = [];\n      var curTableRows = Object.values(tableRows.current);\n\n      for (var i = 0; i < curTableRows.length; i++) {\n        var _curTableRows$i = curTableRows[i],\n            row = _curTableRows$i[0];\n\n        if (row) {\n          var cells = row.querySelectorAll(\".\" + prefix('cell-wrap')) || [];\n          var cellArray = Array.from(cells);\n          var maxHeight = 0;\n\n          for (var j = 0; j < cellArray.length; j++) {\n            var cell = cellArray[j];\n            var h = getHeight(cell);\n            maxHeight = Math.max(maxHeight, h);\n          }\n\n          nextTableRowsMaxHeight.push(maxHeight);\n        }\n      } // Can't perform a React state update on an unmounted component\n\n\n      if (!isEmpty(tableRows.current)) {\n        setTableRowsMaxHeight(nextTableRowsMaxHeight);\n      }\n    }\n  }, [prefix, wordWrap]);\n  useMount(function () {\n    defer(calculateRowMaxHeight);\n  });\n  useUpdateLayoutEffect(function () {\n    /**\n     * After the data is updated, the height of the cell DOM needs to be re-acquired,\n     * and what is often obtained is not the latest DOM that has been rendered.\n     * So use `defer` to delay obtaining the height of the cell DOM.\n     * TODO: To be improved\n     */\n    defer(calculateRowMaxHeight);\n  }, [data, expandedRowKeys]);\n  return {\n    bindTableRowsRef: bindTableRowsRef,\n    tableRowsMaxHeight: tableRowsMaxHeight,\n    tableRows: tableRows\n  };\n};\n\nexport default useTableRows;"]},"metadata":{},"sourceType":"module"}