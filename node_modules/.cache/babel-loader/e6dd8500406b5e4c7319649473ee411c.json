{"ast":null,"code":"import { useRef, useCallback } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\nimport debounce from 'lodash/debounce';\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\n\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      heightProp = props.height,\n      autoHeight = props.autoHeight,\n      minHeight = props.minHeight,\n      fillHeight = props.fillHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      showHeader = props.showHeader,\n      bordered = props.bordered,\n      onTableResizeChange = props.onTableResizeChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var tableHeight = useRef(heightProp || 0);\n  var columnCount = useRef(0);\n  var resizeObserver = useRef();\n  var containerResizeObserver = useRef();\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var getRowHeight = useCallback(function (rowData) {\n    return typeof rowHeight === 'function' ? rowHeight(rowData) : rowHeight;\n  }, [rowHeight]);\n  var calculateTableContextHeight = useCallback(function () {\n    var _table$querySelectorA;\n\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll(\".\" + (prefix === null || prefix === void 0 ? void 0 : prefix('row')))) || [];\n    var virtualized = (table === null || table === void 0 ? void 0 : (_table$querySelectorA = table.querySelectorAll('.virtualized')) === null || _table$querySelectorA === void 0 ? void 0 : _table$querySelectorA.length) > 0;\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row, index) {\n      return getHeight(row) || getRowHeight(data === null || data === void 0 ? void 0 : data[index]);\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight)); // Whether to show the horizontal scroll bar\n\n    var hasHorizontalScrollbar = contentWidth.current > tableWidth.current; // The height of the table content area should be added to the height occupied by the horizontal scroll bar when autoHeight is set.\n\n    if (autoHeight && hasHorizontalScrollbar) {\n      contentHeight.current += SCROLLBAR_WIDTH;\n    }\n\n    var height = fillHeight ? tableHeight.current : heightProp;\n    var tableBodyHeight = showHeader ? height - headerHeight : height;\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (hasHorizontalScrollbar ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: 0\n      });\n    }\n\n    var currentScrollTop = Math.abs(scrollY.current); // When Table is set to virtualized, the logic will be entered every time the wheel event is\n    // triggered to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n    var maxScrollTop = nextContentHeight + SCROLLBAR_WIDTH - tableBodyHeight; // If the top value of the current scroll is greater than the scrollable range,\n    // keep the vertical scroll bar at the bottom.\n\n    if (maxScrollTop > 0 && currentScrollTop > maxScrollTop) {\n      if (virtualized) {\n        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n          y: ((data === null || data === void 0 ? void 0 : data.length) || 0) * getRowHeight() - tableBodyHeight\n        });\n      } else {\n        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n          y: maxScrollTop\n        });\n      }\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, 'bodyHeightChanged');\n    }\n  }, [tableRef, prefix, affixHeader, headerHeight, autoHeight, fillHeight, heightProp, showHeader, getRowHeight, data, onTableScroll, onTableResizeChange]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table === null || table === void 0 ? void 0 : table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth - (autoHeight ? SCROLLBAR_WIDTH : 0);\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    var minScrollWidth = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n\n    if (minScrollX.current !== minScrollWidth) {\n      minScrollX.current = minScrollWidth;\n\n      if (scrollX.current < minScrollWidth) {\n        // fix: 405#issuecomment-1464831646\n        scrollX.current = minScrollWidth;\n      }\n    }\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current || prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'bodyWidthChanged');\n    }\n  }, [autoHeight, onTableResizeChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function (nextWidth) {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'widthChanged');\n    }\n\n    setOffsetByAffix();\n  }, [onTableResizeChange, setOffsetByAffix, tableRef]);\n  var calculateTableHeight = useCallback(function (nextHeight) {\n    var prevHeight = tableHeight.current;\n\n    if (nextHeight) {\n      tableHeight.current = nextHeight;\n    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableHeight.current = getHeight(tableRef.current.parentNode);\n    }\n\n    if (prevHeight && prevHeight !== tableHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, 'heightChanged');\n    }\n  }, [onTableResizeChange, tableRef]);\n  useMount(function () {\n    var _tableRef$current;\n\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    calculateTableHeight();\n    setOffsetByAffix();\n    containerResizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableHeight(entries[0].contentRect.height);\n    });\n    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);\n    var changeTableWidthWhenResize = debounce(function (entries) {\n      var width = entries[0].contentRect.width; // bordered table width is 1px larger than the container width. fix: #405 #404\n\n      var widthWithBorder = width + 2;\n      calculateTableWidth(bordered ? widthWithBorder : width);\n    }, 20);\n    resizeObserver.current = new ResizeObserver(changeTableWidthWhenResize);\n    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    return function () {\n      var _resizeObserver$curre, _containerResizeObser;\n\n      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();\n      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();\n    };\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableHeight();\n    calculateTableContextHeight();\n  }, [fillHeight]);\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContentWidth();\n    calculateTableContextHeight();\n  }, [data, heightProp, contentHeight.current, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n\n  var getTableHeight = function getTableHeight() {\n    if (fillHeight) {\n      return tableHeight.current;\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {\n      return heightProp;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight.current, minHeight) : heightProp;\n  };\n\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    getTableHeight: getTableHeight,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/rsuite-table/es/utils/useTableDimension.js"],"names":["useRef","useCallback","getWidth","getHeight","getOffset","SCROLLBAR_WIDTH","ResizeObserver","useMount","useUpdateLayoutEffect","isNumberOrTrue","debounce","useTableDimension","props","data","rowHeight","tableRef","headerWrapperRef","prefix","widthProp","width","affixHeader","affixHorizontalScrollbar","headerHeight","heightProp","height","autoHeight","minHeight","fillHeight","children","expandedRowKeys","showHeader","bordered","onTableResizeChange","onTableScroll","contentHeight","contentWidth","minScrollY","scrollY","scrollX","minScrollX","tableWidth","tableHeight","columnCount","resizeObserver","containerResizeObserver","headerOffset","tableOffset","getRowHeight","rowData","calculateTableContextHeight","_table$querySelectorA","prevContentHeight","current","table","rows","querySelectorAll","virtualized","length","nextContentHeight","Array","from","map","row","index","reduce","x","y","Math","round","hasHorizontalScrollbar","tableBodyHeight","currentScrollTop","abs","maxScrollTop","setOffsetByAffix","headerNode","calculateTableContentWidth","prevWidth","prevColumnCount","querySelector","nextContentWidth","minScrollWidth","calculateTableWidth","nextWidth","calculateTableHeight","nextHeight","prevHeight","parentNode","_tableRef$current","entries","contentRect","observe","changeTableWidthWhenResize","widthWithBorder","_resizeObserver$curre","_containerResizeObser","disconnect","setScrollY","value","setScrollX","getTableHeight","max"],"mappings":"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","sourcesContent":["import { useRef, useCallback } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\nimport debounce from 'lodash/debounce';\n\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      heightProp = props.height,\n      autoHeight = props.autoHeight,\n      minHeight = props.minHeight,\n      fillHeight = props.fillHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      showHeader = props.showHeader,\n      bordered = props.bordered,\n      onTableResizeChange = props.onTableResizeChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var tableHeight = useRef(heightProp || 0);\n  var columnCount = useRef(0);\n  var resizeObserver = useRef();\n  var containerResizeObserver = useRef();\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var getRowHeight = useCallback(function (rowData) {\n    return typeof rowHeight === 'function' ? rowHeight(rowData) : rowHeight;\n  }, [rowHeight]);\n  var calculateTableContextHeight = useCallback(function () {\n    var _table$querySelectorA;\n\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll(\".\" + (prefix === null || prefix === void 0 ? void 0 : prefix('row')))) || [];\n    var virtualized = (table === null || table === void 0 ? void 0 : (_table$querySelectorA = table.querySelectorAll('.virtualized')) === null || _table$querySelectorA === void 0 ? void 0 : _table$querySelectorA.length) > 0;\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row, index) {\n      return getHeight(row) || getRowHeight(data === null || data === void 0 ? void 0 : data[index]);\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight)); // Whether to show the horizontal scroll bar\n\n    var hasHorizontalScrollbar = contentWidth.current > tableWidth.current; // The height of the table content area should be added to the height occupied by the horizontal scroll bar when autoHeight is set.\n\n    if (autoHeight && hasHorizontalScrollbar) {\n      contentHeight.current += SCROLLBAR_WIDTH;\n    }\n\n    var height = fillHeight ? tableHeight.current : heightProp;\n    var tableBodyHeight = showHeader ? height - headerHeight : height;\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (hasHorizontalScrollbar ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n        y: 0\n      });\n    }\n\n    var currentScrollTop = Math.abs(scrollY.current); // When Table is set to virtualized, the logic will be entered every time the wheel event is\n    // triggered to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n    var maxScrollTop = nextContentHeight + SCROLLBAR_WIDTH - tableBodyHeight; // If the top value of the current scroll is greater than the scrollable range,\n    // keep the vertical scroll bar at the bottom.\n\n    if (maxScrollTop > 0 && currentScrollTop > maxScrollTop) {\n      if (virtualized) {\n        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n          y: ((data === null || data === void 0 ? void 0 : data.length) || 0) * getRowHeight() - tableBodyHeight\n        });\n      } else {\n        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({\n          y: maxScrollTop\n        });\n      }\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, 'bodyHeightChanged');\n    }\n  }, [tableRef, prefix, affixHeader, headerHeight, autoHeight, fillHeight, heightProp, showHeader, getRowHeight, data, onTableScroll, onTableResizeChange]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table === null || table === void 0 ? void 0 : table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth - (autoHeight ? SCROLLBAR_WIDTH : 0);\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    var minScrollWidth = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n\n    if (minScrollX.current !== minScrollWidth) {\n      minScrollX.current = minScrollWidth;\n\n      if (scrollX.current < minScrollWidth) {\n        // fix: 405#issuecomment-1464831646\n        scrollX.current = minScrollWidth;\n      }\n    }\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current || prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'bodyWidthChanged');\n    }\n  }, [autoHeight, onTableResizeChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function (nextWidth) {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n\n    if (prevWidth && prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, 'widthChanged');\n    }\n\n    setOffsetByAffix();\n  }, [onTableResizeChange, setOffsetByAffix, tableRef]);\n  var calculateTableHeight = useCallback(function (nextHeight) {\n    var prevHeight = tableHeight.current;\n\n    if (nextHeight) {\n      tableHeight.current = nextHeight;\n    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableHeight.current = getHeight(tableRef.current.parentNode);\n    }\n\n    if (prevHeight && prevHeight !== tableHeight.current) {\n      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, 'heightChanged');\n    }\n  }, [onTableResizeChange, tableRef]);\n  useMount(function () {\n    var _tableRef$current;\n\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    calculateTableHeight();\n    setOffsetByAffix();\n    containerResizeObserver.current = new ResizeObserver(function (entries) {\n      calculateTableHeight(entries[0].contentRect.height);\n    });\n    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);\n    var changeTableWidthWhenResize = debounce(function (entries) {\n      var width = entries[0].contentRect.width; // bordered table width is 1px larger than the container width. fix: #405 #404\n\n      var widthWithBorder = width + 2;\n      calculateTableWidth(bordered ? widthWithBorder : width);\n    }, 20);\n    resizeObserver.current = new ResizeObserver(changeTableWidthWhenResize);\n    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    return function () {\n      var _resizeObserver$curre, _containerResizeObser;\n\n      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();\n      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();\n    };\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableHeight();\n    calculateTableContextHeight();\n  }, [fillHeight]);\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContentWidth();\n    calculateTableContextHeight();\n  }, [data, heightProp, contentHeight.current, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n\n  var getTableHeight = function getTableHeight() {\n    if (fillHeight) {\n      return tableHeight.current;\n    }\n\n    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {\n      return heightProp;\n    }\n\n    return autoHeight ? Math.max(headerHeight + contentHeight.current, minHeight) : heightProp;\n  };\n\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    getTableHeight: getTableHeight,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;"]},"metadata":{},"sourceType":"module"}