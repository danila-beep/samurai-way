{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '..';\n\nfunction useReadLocalStorage(key) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return null;\n    }\n  }, [key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(event => {\n    if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n      return;\n    }\n\n    setStoredValue(readValue());\n  }, [key, readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return storedValue;\n}\n\nexport default useReadLocalStorage;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/usehooks-ts/dist/esm/useReadLocalStorage/useReadLocalStorage.js"],"names":["useCallback","useEffect","useState","useEventListener","useReadLocalStorage","key","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","handleStorageChange","event"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,gBAAT,QAAiC,IAAjC;;AACA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAC9B,QAAMC,SAAS,GAAGN,WAAW,CAAC,MAAM;AAChC,QAAI,OAAOO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,aAAO,IAAP;AACH;;AACD,QAAI;AACA,YAAMC,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb;AACA,aAAOG,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsB,IAAjC;AACH,KAHD,CAIA,OAAOK,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAc,mCAAkCV,GAAI,IAApD,EAAyDQ,KAAzD;AACA,aAAO,IAAP;AACH;AACJ,GAZ4B,EAY1B,CAACR,GAAD,CAZ0B,CAA7B;AAaA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAACI,SAAD,CAA9C;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,cAAc,CAACX,SAAS,EAAV,CAAd;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,QAAMY,mBAAmB,GAAGlB,WAAW,CAAEmB,KAAD,IAAW;AAC/C,QAAI,CAACA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACd,GAArD,KAA6Dc,KAAK,CAACd,GAAN,KAAcA,GAA/E,EAAoF;AAChF;AACH;;AACDY,IAAAA,cAAc,CAACX,SAAS,EAAV,CAAd;AACH,GALsC,EAKpC,CAACD,GAAD,EAAMC,SAAN,CALoC,CAAvC;AAMAH,EAAAA,gBAAgB,CAAC,SAAD,EAAYe,mBAAZ,CAAhB;AACAf,EAAAA,gBAAgB,CAAC,eAAD,EAAkBe,mBAAlB,CAAhB;AACA,SAAOF,WAAP;AACH;;AACD,eAAeZ,mBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '..';\nfunction useReadLocalStorage(key) {\n    const readValue = useCallback(() => {\n        if (typeof window === 'undefined') {\n            return null;\n        }\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? JSON.parse(item) : null;\n        }\n        catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error);\n            return null;\n        }\n    }, [key]);\n    const [storedValue, setStoredValue] = useState(readValue);\n    useEffect(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = useCallback((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    useEventListener('storage', handleStorageChange);\n    useEventListener('local-storage', handleStorageChange);\n    return storedValue;\n}\nexport default useReadLocalStorage;\n"]},"metadata":{},"sourceType":"module"}