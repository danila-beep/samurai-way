{"ast":null,"code":"import { MixedType } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty } from './utils';\nexport class ObjectType extends MixedType {\n  constructor(errorMessage) {\n    super('object');\n    super.pushRule({\n      onValid: v => typeof v === 'object',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  check() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n    let data = arguments.length > 1 ? arguments[1] : undefined;\n    let fieldName = arguments.length > 2 ? arguments[2] : undefined;\n\n    const check = (value, data, type) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: type.requiredMessage\n        };\n      }\n\n      if (type.objectTypeSchemaSpec && typeof value === 'object') {\n        const checkResultObject = {};\n        let hasError = false;\n        Object.entries(type.objectTypeSchemaSpec).forEach(_ref => {\n          let [k, v] = _ref;\n          const checkResult = check(value[k], value, v);\n\n          if (checkResult === null || checkResult === void 0 ? void 0 : checkResult.hasError) {\n            hasError = true;\n          }\n\n          checkResultObject[k] = checkResult;\n        });\n        return {\n          hasError,\n          object: checkResultObject\n        };\n      }\n\n      const validator = createValidator(data, fieldName);\n      const checkStatus = validator(value, type.priorityRules);\n\n      if (checkStatus) {\n        return checkStatus;\n      }\n\n      if (!type.required && isEmpty(value)) {\n        return {\n          hasError: false\n        };\n      }\n\n      return validator(value, type.rules) || {\n        hasError: false\n      };\n    };\n\n    return check(value, data, this);\n  }\n\n  checkAsync() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n    let data = arguments.length > 1 ? arguments[1] : undefined;\n    let fieldName = arguments.length > 2 ? arguments[2] : undefined;\n\n    const check = (value, data, type) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: this.requiredMessage\n        });\n      }\n\n      const validator = createValidatorAsync(data, fieldName);\n      return new Promise(resolve => {\n        if (type.objectTypeSchemaSpec && typeof value === 'object') {\n          const checkResult = {};\n          const checkAll = [];\n          const keys = [];\n          Object.entries(type.objectTypeSchemaSpec).forEach(_ref2 => {\n            let [k, v] = _ref2;\n            checkAll.push(check(value[k], value, v));\n            keys.push(k);\n          });\n          return Promise.all(checkAll).then(values => {\n            values.forEach((v, index) => {\n              checkResult[keys[index]] = v;\n            });\n            resolve({\n              object: checkResult\n            });\n          });\n        }\n\n        return validator(value, type.priorityRules).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        }).then(() => {\n          if (!type.required && isEmpty(value)) {\n            resolve({\n              hasError: false\n            });\n          }\n        }).then(() => validator(value, type.rules)).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n\n          resolve({\n            hasError: false\n          });\n        });\n      });\n    };\n\n    return check(value, data, this);\n  }\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n\n\n  shape(fields) {\n    this.objectTypeSchemaSpec = fields;\n    return this;\n  }\n\n}\nexport default function getObjectType(errorMessage) {\n  return new ObjectType(errorMessage);\n}","map":{"version":3,"mappings":"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","names":["MixedType","createValidator","createValidatorAsync","checkRequired","isEmpty","ObjectType","constructor","errorMessage","pushRule","onValid","v","locale","type","check","value","data","fieldName","required","trim","emptyAllowed","hasError","requiredMessage","objectTypeSchemaSpec","checkResultObject","Object","entries","forEach","k","checkResult","object","validator","checkStatus","priorityRules","rules","checkAsync","Promise","resolve","checkAll","keys","push","all","then","values","index","shape","fields","getObjectType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/ObjectType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty } from './utils';\nimport { PlainObject, SchemaDeclaration, CheckResult, ErrorMessageType } from './types';\nimport { ObjectTypeLocale } from './locales';\n\nexport class ObjectType<DataType = any, E = ErrorMessageType> extends MixedType<\n  PlainObject,\n  DataType,\n  E,\n  ObjectTypeLocale\n> {\n  objectTypeSchemaSpec: SchemaDeclaration<DataType, E>;\n  constructor(errorMessage?: E | string) {\n    super('object');\n    super.pushRule({\n      onValid: v => typeof v === 'object',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  check(value: PlainObject = this.value, data?: DataType, fieldName?: string | string[]) {\n    const check = (value: any, data: any, type: any) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return { hasError: true, errorMessage: type.requiredMessage };\n      }\n\n      if (type.objectTypeSchemaSpec && typeof value === 'object') {\n        const checkResultObject: any = {};\n        let hasError = false;\n        Object.entries(type.objectTypeSchemaSpec).forEach(([k, v]) => {\n          const checkResult = check(value[k], value, v);\n          if (checkResult?.hasError) {\n            hasError = true;\n          }\n          checkResultObject[k] = checkResult;\n        });\n\n        return { hasError, object: checkResultObject };\n      }\n\n      const validator = createValidator<PlainObject, DataType, E | string>(data, fieldName);\n      const checkStatus = validator(value, type.priorityRules);\n\n      if (checkStatus) {\n        return checkStatus;\n      }\n\n      if (!type.required && isEmpty(value)) {\n        return { hasError: false };\n      }\n\n      return validator(value, type.rules) || { hasError: false };\n    };\n\n    return check(value, data, this) as CheckResult<E | string, DataType>;\n  }\n\n  checkAsync(value: PlainObject = this.value, data?: DataType, fieldName?: string | string[]) {\n    const check = (value: any, data: any, type: any) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({ hasError: true, errorMessage: this.requiredMessage });\n      }\n\n      const validator = createValidatorAsync<PlainObject, DataType, E | string>(data, fieldName);\n\n      return new Promise(resolve => {\n        if (type.objectTypeSchemaSpec && typeof value === 'object') {\n          const checkResult: any = {};\n          const checkAll: Promise<unknown>[] = [];\n          const keys: string[] = [];\n          Object.entries(type.objectTypeSchemaSpec).forEach(([k, v]) => {\n            checkAll.push(check(value[k], value, v));\n            keys.push(k);\n          });\n\n          return Promise.all(checkAll).then(values => {\n            values.forEach((v, index) => {\n              checkResult[keys[index]] = v;\n            });\n\n            resolve({ object: checkResult });\n          });\n        }\n\n        return validator(value, type.priorityRules)\n          .then((checkStatus: CheckResult<E | string, DataType> | void | null) => {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n          })\n          .then(() => {\n            if (!type.required && isEmpty(value)) {\n              resolve({ hasError: false });\n            }\n          })\n          .then(() => validator(value, type.rules))\n          .then((checkStatus: CheckResult<E | string, DataType> | void | null) => {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n            resolve({ hasError: false });\n          });\n      });\n    };\n\n    return check(value, data, this) as Promise<CheckResult<E | string, DataType>>;\n  }\n\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n  shape(fields: SchemaDeclaration<DataType, E>) {\n    this.objectTypeSchemaSpec = fields;\n    return this;\n  }\n}\n\nexport default function getObjectType<DataType = any, E = string>(errorMessage?: E) {\n  return new ObjectType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}