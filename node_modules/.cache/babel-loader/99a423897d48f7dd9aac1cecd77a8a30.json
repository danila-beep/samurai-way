{"ast":null,"code":"import formatErrorMessage from './formatErrorMessage';\n\nfunction isObj(o) {\n  return o != null && (typeof o === 'object' || typeof o == 'function');\n}\n\nfunction isPromiseLike(v) {\n  return v instanceof Promise || isObj(v) && typeof v.then === 'function';\n}\n/**\n * Create a data validator\n * @param data\n */\n\n\nexport function createValidator(data, name) {\n  return (value, rules) => {\n    for (let i = 0; i < rules.length; i += 1) {\n      const {\n        onValid,\n        errorMessage,\n        params,\n        isAsync\n      } = rules[i];\n      if (isAsync) continue;\n      const checkResult = onValid(value, data, name);\n\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(errorMessage, { ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        };\n      } else if (isPromiseLike(checkResult)) {\n        throw new Error('synchronous validator had an async result, you should probably call \"checkAsync()\"');\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n    }\n\n    return null;\n  };\n}\nexport default createValidator;","map":{"version":3,"mappings":"AACA,OAAOA,kBAAP,MAA+B,sBAA/B;;AACA,SAASC,KAAT,CAAeC,CAAf,EAAyB;AACvB,SAAOA,CAAC,IAAI,IAAL,KAAc,OAAOA,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,IAAY,UAAnD,CAAP;AACD;;AACD,SAASC,aAAT,CAAuBC,CAAvB,EAAiC;AAC/B,SAAOA,CAAC,YAAYC,OAAb,IAAyBJ,KAAK,CAACG,CAAD,CAAL,IAAY,OAAOA,CAAC,CAACE,IAAT,KAAkB,UAA9D;AACD;AACD;;;;;;AAIA,OAAM,SAAUC,eAAV,CAAmCC,IAAnC,EAA6CC,IAA7C,EAAqE;AACzE,SAAO,CAACC,KAAD,EAAWC,KAAX,KAAgE;AACrE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC,YAAM;AAAEE,eAAF;AAAWC,oBAAX;AAAyBC,cAAzB;AAAiCC;AAAjC,UAA6CN,KAAK,CAACC,CAAD,CAAxD;AACA,UAAIK,OAAJ,EAAa;AACb,YAAMC,WAAW,GAAGJ,OAAO,CAACJ,KAAD,EAAQF,IAAR,EAAcC,IAAd,CAA3B;;AAEA,UAAIS,WAAW,KAAK,KAApB,EAA2B;AACzB,eAAO;AACLC,kBAAQ,EAAE,IADL;AAELJ,sBAAY,EAAEf,kBAAkB,CAAIe,YAAJ,EAAkB,EAChD,GAAGC,MAD6C;AAEhDP,gBAAI,EAAEW,KAAK,CAACC,OAAN,CAAcZ,IAAd,IAAsBA,IAAI,CAACa,IAAL,CAAU,GAAV,CAAtB,GAAuCb;AAFG,WAAlB;AAF3B,SAAP;AAOD,OARD,MAQO,IAAIN,aAAa,CAACe,WAAD,CAAjB,EAAgC;AACrC,cAAM,IAAIK,KAAJ,CACJ,oFADI,CAAN;AAGD,OAJM,MAIA,IAAI,OAAOL,WAAP,KAAuB,QAAvB,KAAoCA,WAAW,CAACC,QAAZ,IAAwBD,WAAW,CAACM,KAAxE,CAAJ,EAAoF;AACzF,eAAON,WAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAxBD;AAyBD;AAED,eAAeX,eAAf","names":["formatErrorMessage","isObj","o","isPromiseLike","v","Promise","then","createValidator","data","name","value","rules","i","length","onValid","errorMessage","params","isAsync","checkResult","hasError","Array","isArray","join","Error","array"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/utils/createValidator.ts"],"sourcesContent":["import { CheckResult, RuleType } from '../types';\nimport formatErrorMessage from './formatErrorMessage';\nfunction isObj(o: unknown): o is Record<PropertyKey, unknown> {\n  return o != null && (typeof o === 'object' || typeof o == 'function');\n}\nfunction isPromiseLike(v: unknown): v is Promise<unknown> {\n  return v instanceof Promise || (isObj(v) && typeof v.then === 'function');\n}\n/**\n * Create a data validator\n * @param data\n */\nexport function createValidator<V, D, E>(data?: D, name?: string | string[]) {\n  return (value: V, rules: RuleType<V, D, E>[]): CheckResult<E> | null => {\n    for (let i = 0; i < rules.length; i += 1) {\n      const { onValid, errorMessage, params, isAsync } = rules[i];\n      if (isAsync) continue;\n      const checkResult = onValid(value, data, name);\n\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage<E>(errorMessage, {\n            ...params,\n            name: Array.isArray(name) ? name.join('.') : name\n          })\n        };\n      } else if (isPromiseLike(checkResult)) {\n        throw new Error(\n          'synchronous validator had an async result, you should probably call \"checkAsync()\"'\n        );\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n    }\n\n    return null;\n  };\n}\n\nexport default createValidator;\n"]},"metadata":{},"sourceType":"module"}