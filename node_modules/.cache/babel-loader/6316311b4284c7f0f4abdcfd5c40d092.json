{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { PARENT_KEY } from '../constants';\n/**\n * Flatten the tree data with parent association recorded on each node\n * @param tree tree data\n */\n\nfunction flattenData(tree, parent) {\n  return tree.reduce(function (acc, node) {\n    var _extends2; // Create a new flattened node with parent association\n\n\n    var flattened = _extends({}, node, (_extends2 = {}, _extends2[PARENT_KEY] = parent, _extends2)); // Add the flattened node and its flattened children (if any) to the result array\n\n\n    acc.push.apply(acc, [flattened].concat(node.children ? flattenData(node.children, flattened) : []));\n    return acc;\n  }, []);\n}\n\nexport default flattenData;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/rsuite-table/es/utils/flattenData.js"],"names":["_extends","PARENT_KEY","flattenData","tree","parent","reduce","acc","node","_extends2","flattened","push","apply","concat","children"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;AACjC,SAAOD,IAAI,CAACE,MAAL,CAAY,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACtC,QAAIC,SAAJ,CADsC,CAGtC;;;AACA,QAAIC,SAAS,GAAGT,QAAQ,CAAC,EAAD,EAAKO,IAAL,GAAYC,SAAS,GAAG,EAAZ,EAAgBA,SAAS,CAACP,UAAD,CAAT,GAAwBG,MAAxC,EAAgDI,SAA5D,EAAxB,CAJsC,CAI2D;;;AAGjGF,IAAAA,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAeL,GAAf,EAAoB,CAACG,SAAD,EAAYG,MAAZ,CAAmBL,IAAI,CAACM,QAAL,GAAgBX,WAAW,CAACK,IAAI,CAACM,QAAN,EAAgBJ,SAAhB,CAA3B,GAAwD,EAA3E,CAApB;AACA,WAAOH,GAAP;AACD,GATM,EASJ,EATI,CAAP;AAUD;;AAED,eAAeJ,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { PARENT_KEY } from '../constants';\n\n/**\n * Flatten the tree data with parent association recorded on each node\n * @param tree tree data\n */\nfunction flattenData(tree, parent) {\n  return tree.reduce(function (acc, node) {\n    var _extends2;\n\n    // Create a new flattened node with parent association\n    var flattened = _extends({}, node, (_extends2 = {}, _extends2[PARENT_KEY] = parent, _extends2)); // Add the flattened node and its flattened children (if any) to the result array\n\n\n    acc.push.apply(acc, [flattened].concat(node.children ? flattenData(node.children, flattened) : []));\n    return acc;\n  }, []);\n}\n\nexport default flattenData;"]},"metadata":{},"sourceType":"module"}