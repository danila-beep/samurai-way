{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useLocalStorage, useMediaQuery, useUpdateEffect } from '..';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\n\nfunction useTernaryDarkMode() {\n  const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n  const [ternaryDarkMode, setTernaryDarkMode] = useLocalStorage('usehooks-ts-ternary-dark-mode', 'system');\n  const [isDarkMode, setDarkMode] = useState(isDarkOS);\n  useUpdateEffect(() => {\n    if (ternaryDarkMode === 'system') {\n      setDarkMode(isDarkOS);\n    }\n  }, [isDarkOS]);\n  useEffect(() => {\n    switch (ternaryDarkMode) {\n      case 'light':\n        setDarkMode(false);\n        break;\n\n      case 'system':\n        setDarkMode(isDarkOS);\n        break;\n\n      case 'dark':\n        setDarkMode(true);\n        break;\n    }\n  }, [ternaryDarkMode, isDarkOS]);\n\n  function toggleTernaryDarkMode() {\n    const toggleDict = {\n      light: 'system',\n      system: 'dark',\n      dark: 'light'\n    };\n    setTernaryDarkMode(prevMode => toggleDict[prevMode]);\n  }\n\n  return {\n    isDarkMode,\n    ternaryDarkMode,\n    setTernaryDarkMode,\n    toggleTernaryDarkMode\n  };\n}\n\nexport default useTernaryDarkMode;","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/usehooks-ts/dist/esm/useTernaryDarkMode/useTernaryDarkMode.js"],"names":["useEffect","useState","useLocalStorage","useMediaQuery","useUpdateEffect","COLOR_SCHEME_QUERY","useTernaryDarkMode","isDarkOS","ternaryDarkMode","setTernaryDarkMode","isDarkMode","setDarkMode","toggleTernaryDarkMode","toggleDict","light","system","dark","prevMode"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,eAAzC,QAAgE,IAAhE;AACA,MAAMC,kBAAkB,GAAG,8BAA3B;;AACA,SAASC,kBAAT,GAA8B;AAC1B,QAAMC,QAAQ,GAAGJ,aAAa,CAACE,kBAAD,CAA9B;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCP,eAAe,CAAC,+BAAD,EAAkC,QAAlC,CAA7D;AACA,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BV,QAAQ,CAACM,QAAD,CAA1C;AACAH,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAII,eAAe,KAAK,QAAxB,EAAkC;AAC9BG,MAAAA,WAAW,CAACJ,QAAD,CAAX;AACH;AACJ,GAJc,EAIZ,CAACA,QAAD,CAJY,CAAf;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACZ,YAAQQ,eAAR;AACI,WAAK,OAAL;AACIG,QAAAA,WAAW,CAAC,KAAD,CAAX;AACA;;AACJ,WAAK,QAAL;AACIA,QAAAA,WAAW,CAACJ,QAAD,CAAX;AACA;;AACJ,WAAK,MAAL;AACII,QAAAA,WAAW,CAAC,IAAD,CAAX;AACA;AATR;AAWH,GAZQ,EAYN,CAACH,eAAD,EAAkBD,QAAlB,CAZM,CAAT;;AAaA,WAASK,qBAAT,GAAiC;AAC7B,UAAMC,UAAU,GAAG;AACfC,MAAAA,KAAK,EAAE,QADQ;AAEfC,MAAAA,MAAM,EAAE,MAFO;AAGfC,MAAAA,IAAI,EAAE;AAHS,KAAnB;AAKAP,IAAAA,kBAAkB,CAACQ,QAAQ,IAAIJ,UAAU,CAACI,QAAD,CAAvB,CAAlB;AACH;;AACD,SAAO;AACHP,IAAAA,UADG;AAEHF,IAAAA,eAFG;AAGHC,IAAAA,kBAHG;AAIHG,IAAAA;AAJG,GAAP;AAMH;;AACD,eAAeN,kBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocalStorage, useMediaQuery, useUpdateEffect } from '..';\nconst COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nfunction useTernaryDarkMode() {\n    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);\n    const [ternaryDarkMode, setTernaryDarkMode] = useLocalStorage('usehooks-ts-ternary-dark-mode', 'system');\n    const [isDarkMode, setDarkMode] = useState(isDarkOS);\n    useUpdateEffect(() => {\n        if (ternaryDarkMode === 'system') {\n            setDarkMode(isDarkOS);\n        }\n    }, [isDarkOS]);\n    useEffect(() => {\n        switch (ternaryDarkMode) {\n            case 'light':\n                setDarkMode(false);\n                break;\n            case 'system':\n                setDarkMode(isDarkOS);\n                break;\n            case 'dark':\n                setDarkMode(true);\n                break;\n        }\n    }, [ternaryDarkMode, isDarkOS]);\n    function toggleTernaryDarkMode() {\n        const toggleDict = {\n            light: 'system',\n            system: 'dark',\n            dark: 'light',\n        };\n        setTernaryDarkMode(prevMode => toggleDict[prevMode]);\n    }\n    return {\n        isDarkMode,\n        ternaryDarkMode,\n        setTernaryDarkMode,\n        toggleTernaryDarkMode,\n    };\n}\nexport default useTernaryDarkMode;\n"]},"metadata":{},"sourceType":"module"}