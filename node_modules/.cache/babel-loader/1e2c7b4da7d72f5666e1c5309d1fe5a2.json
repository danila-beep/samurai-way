{"ast":null,"code":"import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n  constructor(errorMessage) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  rangeLength(minLength, maxLength) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n\n  minLength(minLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n\n  maxLength(maxLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n\n  unrepeatable() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.unrepeatable;\n    super.pushRule({\n      onValid: items => {\n        const hash = {};\n\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n\n          hash[items[i]] = true;\n        }\n\n        return true;\n      },\n      errorMessage\n    });\n    return this;\n  }\n\n  of(type) {\n    super.pushRule({\n      onValid: (items, data, filedName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(filedName) ? [...filedName, `[${index}]`] : [filedName, `[${index}]`];\n          return type.check(value, data, name);\n        });\n        const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n        return {\n          hasError,\n          array: checkResults\n        };\n      }\n    });\n    return this;\n  }\n\n}\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":{"version":3,"mappings":"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","names":["MixedType","ArrayType","constructor","errorMessage","pushRule","onValid","v","Array","isArray","locale","type","rangeLength","minLength","maxLength","value","length","params","unrepeatable","items","hash","i","of","data","filedName","checkResults","map","index","name","check","hasError","find","item","array","getArrayType"],"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/node_modules/schema-typed/src/ArrayType.ts"],"sourcesContent":["import { MixedType } from './MixedType';\nimport { PlainObject, CheckResult, ErrorMessageType } from './types';\nimport { ArrayTypeLocale } from './locales';\n\nexport class ArrayType<DataType = any, E = ErrorMessageType> extends MixedType<\n  any[],\n  DataType,\n  E,\n  ArrayTypeLocale\n> {\n  constructor(errorMessage?: E | string) {\n    super('array');\n    super.pushRule({\n      onValid: v => Array.isArray(v),\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  rangeLength(\n    minLength: number,\n    maxLength: number,\n    errorMessage: E | string = this.locale.rangeLength\n  ) {\n    super.pushRule({\n      onValid: (value: string[]) => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: { minLength, maxLength }\n    });\n    return this;\n  }\n\n  minLength(minLength: number, errorMessage: E | string = this.locale.minLength) {\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: { minLength }\n    });\n\n    return this;\n  }\n\n  maxLength(maxLength: number, errorMessage: E | string = this.locale.maxLength) {\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: { maxLength }\n    });\n    return this;\n  }\n\n  unrepeatable(errorMessage: E | string = this.locale.unrepeatable) {\n    super.pushRule({\n      onValid: items => {\n        const hash: PlainObject = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n\n    return this;\n  }\n\n  of(type: MixedType<any, DataType, E>) {\n    super.pushRule({\n      onValid: (items, data, filedName) => {\n        const checkResults = items.map((value, index) => {\n          const name = Array.isArray(filedName)\n            ? [...filedName, `[${index}]`]\n            : [filedName, `[${index}]`];\n\n          return type.check(value, data, name as string[]);\n        });\n        const hasError = !!checkResults.find(item => item?.hasError);\n\n        return {\n          hasError,\n          array: checkResults\n        } as CheckResult<string | E>;\n      }\n    });\n\n    return this;\n  }\n}\n\nexport default function getArrayType<DataType = any, E = string>(errorMessage?: E) {\n  return new ArrayType<DataType, E>(errorMessage);\n}\n"]},"metadata":{},"sourceType":"module"}