{"ast":null,"code":"import { authApi } from \"../../api/socialMediaAPI\";\nconst initialState = {\n  isAuthorized: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"auth/me\":\n      return { ...state,\n        ...action.data,\n        isAuthorized: true\n      };\n\n    default:\n      return state;\n  }\n};\nexport const meAC = data => {\n  return {\n    type: \"auth/me\",\n    data\n  };\n};\nexport const meTC = () => dispatch => {\n  authApi.me().then(res => {\n    if (res.data.resultCode === 0) {\n      dispatch(meAC(res.data.data));\n    } else {\n      console.log(res.data.messages);\n    }\n  }).catch(err => {\n    console.log(err.message);\n  });\n};","map":{"version":3,"sources":["/Users/danilnagovicyn/Desktop/reactprojects/Incubator/Samurai_way/samurai-way/src/store/reducers/authReducer.ts"],"names":["authApi","initialState","isAuthorized","authReducer","state","action","type","data","meAC","meTC","dispatch","me","then","res","resultCode","console","log","messages","catch","err","message"],"mappings":"AACA,SAASA,OAAT,QAAwB,0BAAxB;AAEA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,YAAY,EAAE;AADoB,CAApC;AAIA,OAAO,MAAMC,WAAW,GAAG,YAA+C;AAAA,MAA9CC,KAA8C,uEAAtCH,YAAsC;AAAA,MAAxBI,MAAwB;;AACxE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO,EACL,GAAGF,KADE;AAEL,WAAGC,MAAM,CAACE,IAFL;AAGLL,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAMF;AACE,aAAOE,KAAP;AATJ;AAWD,CAZM;AAcP,OAAO,MAAMI,IAAI,GAAID,IAAD,IAId;AACJ,SAAO;AAAED,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA;AAAnB,GAAP;AACD,CANM;AAQP,OAAO,MAAME,IAAI,GAAG,MAAOC,QAAD,IAAwB;AAChDV,EAAAA,OAAO,CACJW,EADH,GAEGC,IAFH,CAESC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACN,IAAJ,CAASO,UAAT,KAAwB,CAA5B,EAA+B;AAC7BJ,MAAAA,QAAQ,CAACF,IAAI,CAACK,GAAG,CAACN,IAAJ,CAASA,IAAV,CAAL,CAAR;AAED,KAHD,MAGO;AACLQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACN,IAAJ,CAASU,QAArB;AACD;AACF,GATH,EAUGC,KAVH,CAUUC,GAAD,IAAS;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAaG,GAAD,CAA6BC,OAAzC;AACD,GAZH;AAaD,CAdM","sourcesContent":["import { Dispatch } from \"redux\";\nimport { authApi } from \"../../api/socialMediaAPI\";\n\nconst initialState: authStateType = {\n  isAuthorized: false,\n};\n\nexport const authReducer = (state = initialState, action: ActionsType) => {\n  switch (action.type) {\n    case \"auth/me\":\n      return {\n        ...state,\n        ...action.data,\n        isAuthorized: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const meAC = (data: {\n  userId: number;\n  email: string;\n  login: string;\n}) => {\n  return { type: \"auth/me\", data } as const;\n};\n\nexport const meTC = () => (dispatch: Dispatch) => {\n  authApi\n    .me()\n    .then((res) => {\n      if (res.data.resultCode === 0) {\n        dispatch(meAC(res.data.data));\n\n      } else {\n        console.log(res.data.messages);\n      }\n    })\n    .catch((err) => {\n      console.log((err as { message: string }).message);\n    });\n};\n\nexport type authStateType = {\n  isAuthorized: boolean;\n  data?: {\n    userId: number;\n    email: string;\n    login: string;\n  };\n};\n\ntype MeActionType = ReturnType<typeof meAC>;\n\ntype ActionsType = MeActionType;\n"]},"metadata":{},"sourceType":"module"}